pg <- get_map(location='Wageningen, GL',
zoom = 14,       # ranges from 0 (whole world) to 21 (building)
source='stamen', # try 'google' or 'osm'
maptype='terrain',
color='color'
)
PG <- ggmap(pg, extent='panel',
base_layer=ggplot(API, aes(x=lon, y=lat))
)
print(PG)
pg <- get_map(location='Wageningen, GL',
zoom = 14,       # ranges from 0 (whole world) to 21 (building)
source='stamen', # try 'google' or 'osm'
maptype='toner',
color='color'
)
# the ggmap() function will convert your map data into a ggplot object
# the agruments to include your data at this stage are not essential, but
# can make it easier to add layers (such as 'geoms') later on
PG <- ggmap(pg, extent='panel',
base_layer=ggplot(API, aes(x=lon, y=lat))
)
print(PG)
PG <- ggmap(pg, extent='panel',
base_layer=ggplot(API, aes(x=lon, y=lat))
)
print(PG)
PG <- PG + geom_point(color = "red", size = 4)
print(PG)
pg <- get_map(location='Wageningen, GL',
zoom = 13,       # ranges from 0 (whole world) to 21 (building)
source='stamen', # try 'google' or 'osm'
maptype='toner',
color='color'
)
PG <- ggmap(pg, extent='panel',
base_layer=ggplot(API, aes(x=lon, y=lat))
)
print(PG)
PG <- PG + geom_point(color = "red", size = 4)
print(PG)
PG <- PG + geom_point(color = "green", size = 4)
print(PG)
pg <- get_map(location='Wageningen, GL',
zoom = 12,       # ranges from 0 (whole world) to 21 (building)
source='stamen', # try 'google' or 'osm'
maptype='toner',
color='color'
)
# the ggmap() function will convert your map data into a ggplot object
# the agruments to include your data at this stage are not essential, but
# can make it easier to add layers (such as 'geoms') later on
PG <- ggmap(pg, extent='panel',
)
print(PG)
base_layer=ggplot(API, aes(x=lon, y=lat))
PG <- PG + geom_point(color = "green", size = 4)
print(PG)
print(PG)
PG <- PG + geom_point(color = "green", size = 4)
print(PG)
API= read.csv("Data/placesAPIWedJan//placesAPIWedJansupermarketWageningen.csv", header = TRUE)
print(names(API))
pg <- get_map(location='Wageningen, GL',
zoom = 12,       # ranges from 0 (whole world) to 21 (building)
source='stamen', # try 'google' or 'osm'
maptype='toner',
color='color'
)
# the ggmap() function will convert your map data into a ggplot object
# the agruments to include your data at this stage are not essential, but
# can make it easier to add layers (such as 'geoms') later on
PG <- ggmap(pg, extent='panel',
base_layer=ggplot(API, aes(x=lon, y=lat))
)
print(PG)
PG <- PG + geom_point(color = "green", size = 4)
print(PG)
API= read.csv("Data/placesAPIWedJan//placesAPIWedJanrestaurantWageningen.csv", header = TRUE)
print(names(API))
zoom = 12,       # ranges from 0 (whole world) to 21 (building)
source='stamen', # try 'google' or 'osm'
color='color'
)
# the agruments to include your data at this stage are not essential, but
# can make it easier to add layers (such as 'geoms') later on
base_layer=ggplot(API, aes(x=lon, y=lat))
print(PG)
PG <- PG + geom_point(color = "green", size = 4)
print(PG)
maptype='toner',
pg <- get_map(location='Wageningen, GL',
)
PG <- ggmap(pg, extent='panel',
# the ggmap() function will convert your map data into a ggplot object
pg <- get_map(location='Wageningen, GL',
zoom = 14,       # ranges from 0 (whole world) to 21 (building)
source='stamen', # try 'google' or 'osm'
maptype='toner',
color='color'
)
# the ggmap() function will convert your map data into a ggplot object
# the agruments to include your data at this stage are not essential, but
# can make it easier to add layers (such as 'geoms') later on
PG <- ggmap(pg, extent='panel',
base_layer=ggplot(API, aes(x=lon, y=lat))
)
print(PG)
PG <- PG + geom_point(color = "green", size = 4)
print(PG)
pg <- get_map(location='Wageningen, GL',
zoom = 15,       # ranges from 0 (whole world) to 21 (building)
source='stamen', # try 'google' or 'osm'
maptype='toner',
color='color'
)
PG <- ggmap(pg, extent='panel',
base_layer=ggplot(API, aes(x=lon, y=lat))
)
print(PG)
print(PG)
PG <- PG + geom_point(color = "green", size = 4)
pg <- get_map(location='Wageningen, GL',
zoom = 15,       # ranges from 0 (whole world) to 21 (building)
source='stamen', # try 'google' or 'osm'
maptype='toner',
color='color'
)
PG <- ggmap(pg, extent='panel',
base_layer=ggplot(API, aes(x=lon, y=lat))
)
print(PG)
PG <- PG + geom_point(color = "green", size = 4)
print(PG)
source("R/BasicMapMaker.R")
source("R/BasicMapMaker.R")
basicmapmaker(location = 'Ede , GL',csvfile = "Data/placesAPIWedJan//placesAPIWedJansupermarketEde.csv",zoom = 13,maptype = 'toner')
basicmapmaker(location = 'Ede , GL',csvfile = "Data/placesAPIWedJan//placesAPIWedJansupermarketEde.csv",zoom = 10,maptype = 'toner')
basicmapmaker(location = 'Wageningen , GL',csvfile = "Data/placesAPIWedJan//placesAPIWedJanrestaurantWageningen.csv.csv",zoom = 10,maptype = 'toner')
basicmapmaker(location = 'Wageningen , GL',csvfile = "Data/placesAPIWedJan//placesAPIWedJanrestaurantWageningen.csv",zoom = 10,maptype = 'toner')
basicmapmaker(location = 'Ede , GL',csvfile = "Data/placesAPIWedJan//placesAPIWedJanrestaurantWageningen.csv",zoom = 10,maptype = 'toner')
basicmapmaker(location = 'Ede , GL',csvfile = "Data/placesAPIWedJan//placesAPIWedJansupermarketEde.csv",zoom = 10,maptype = 'toner')
basicmapmaker(location = 'Ede , GL',csvfile = "Data/placesAPIWedJan//placesAPIWedJansupermarketEde.csv",zoom = 7,maptype = 'toner')
basicmapmaker(location = 'Ede , GL',csvfile = "Data/placesAPIWedJan//placesAPIWedJansupermarketEde.csv",zoom = 7,maptype = 'toner')
source("R/BasicMapMaker.R")
basicmapmaker(location = 'Ede , GL',csvfile = "Data/placesAPIWedJan//placesAPIWedJansupermarketEde.csv",zoom = 10,maptype = 'toner')
basicmapmaker(location = 'Ede , GL',csvfile = "Data/placesAPIWedJan//placesAPIWedJansupermarketEde.csv",zoom = 2,maptype = 'toner')
basicmapmaker(location = 'Ede , GL',csvfile = "Data/placesAPIWedJan//placesAPIWedJansupermarketEde.csv",zoom = 2,maptype = 'toner')
source("R/BasicMapMaker.R")
basicmapmaker(location = 'Ede , GL',csvfile = "Data/placesAPIWedJan//placesAPIWedJansupermarketEde.csv",zoom = 2,maptype = 'toner')
basicmapmaker(location = 'Ede , GL',csvfile = "Data/placesAPIWedJan//placesAPIWedJansupermarketEde.csv",zoom = 12,maptype = 'toner')
basicmapmaker(location = 'Ede , GL',csvfile = "Data/placesAPIWedJan//placesAPIWedJansupermarketEde.csv",zoom = 14,maptype = 'toner')
basicmapmaker(location = 'Ede , GL',csvfile = "Data/placesAPIWedJan//placesAPIWedJansupermarketEde.csv",zoom = 10,maptype = 'toner')
basicmapmaker(location = 'Ede , GL',csvfile = "Data/placesAPIWedJan//placesAPIWedJansupermarketEde.csv",zoom = 11,maptype = 'toner')
basicmapmaker(location = 'Ede , GL',csvfile = "Data/placesAPIWedJan//placesAPIWedJansupermarketEde.csv",zoom = 12,maptype = 'toner')
get.places.API.Loop(lat = LatCity, lon = LonCity, radius = 1000, searchtypes = "grocery_or_supermarket",
filetype = "json", key = "AIzaSyAcdv2napQhKQoP8pY9nebMkFJTZyeddDs")
JsonToCsvWriter("Data/placesAPIWedJan", "supermarket", "Ede")
API = (read.csv("Data/placesAPIWedJan/placesAPIWedJansupermarketEde.csv", header = TRUE))
names(API)
names(API)
basicmapmaker(location = 'Ede , GL',csvfile = "Data/placesAPIWedJan//placesAPIWedJansupermarketEde.csv",zoom = 12,maptype = 'toner')
API
source("R/BasicMapMaker.R")
basicmapmaker(location = 'Ede , GL',csvfile = "Data/placesAPIWedJan//placesAPIWedJansupermarketEde.csv",zoom = 12,maptype = 'toner',title = "Ede Supermarkets 1km from Centre")
basicmapmaker(location = 'Ede , GL',csvfile = "Data/placesAPIWedJan//placesAPIWedJansupermarketEde.csv",zoom = 14,maptype = 'toner',title = "Ede Supermarkets 1km from Centre")
basicmapmaker(location = 'Ede , GL',csvfile = "Data/placesAPIWedJan//placesAPIWedJansupermarketEde.csv",zoom = 15,maptype = 'toner',title = "Ede Supermarkets 1km from Centre")
basicmapmaker(location = 'Ede , GL',csvfile = "Data/placesAPIWedJan//placesAPIWedJansupermarketEde.csv",zoom = 16,maptype = 'toner',title = "Ede Supermarkets 1km from Centre")
basicmapmaker(location = 'Ede , GL',csvfile = "Data/placesAPIWedJan//placesAPIWedJansupermarketEde.csv",zoom = 13,maptype = 'toner',title = "Ede Supermarkets 1km from Centre")
basicmapmaker(location = 'Ede , GL',csvfile = "Data/placesAPIWedJan//placesAPIWedJansupermarketEde.csv",zoom = 14,maptype = 'toner',title = "Ede Supermarkets 1km from Centre")
basicmapmaker(location = 'Ede , GL',csvfile = "Data/placesAPIWedJan//placesAPIWedJansupermarketEde.csv",zoom = 14,maptype = 'toner',title = "Ede Supermarkets 1km from Centre")
basicmapmaker(location = 'Wageningen , GL',csvfile = "Data/placesAPIWedJan//placesAPIWedJansupermarketWageningen.csv",zoom = 14,maptype = 'toner',title = "Ede Supermarkets 1km from Centre")
basicmapmaker(location = 'Wageningen , GL',csvfile = "Data/placesAPIWedJan//placesAPIWedJansupermarketWageningen.csv",zoom = 14,maptype = 'toner',title = "Ede Supermarkets 1km from Centre")
basicmapmaker(location = 'Wageningen , GL',csvfile = "Data/placesAPIWedJan//placesAPIWedJansupermarketWageningen.csv",zoom = 14,maptype = 'toner',title = "Ede Supermarkets 1km from Centre")
basicmapmaker(location = 'Wageningen , GL',csvfile = "Data/placesAPIWedJan//placesAPIWedJansupermarketWageningen.csv",zoom = 14,maptype = 'toner',title = "Ede Supermarkets 1km from Centre")
# Team: ZeaPol
# Team Members: Roeland de Koning / Barbara Sienkiewicz
# Date: 29/01/2015
# Final_Project
##########################################################
# Check working directory
getwd()
# If necessary, change directory by:
#setwd()
# Load libraries
library(RCurl)
library(RJSONIO)
library(plyr)
library(ggplot2)
library(ggmap)
library(maps)
library(sp)
library(rgdal)
library(RgoogleMaps)
library(mapproj)
# Functions used
source("R/GeocodeLocater.R")
source("R/APIget.R")
source("R/APIgetLoop.R")
source("R/Sleep.R")
source("R/JsontoCsvWriter.R")
source("R/BasicMapMaker.R")
##########################################################
# BELOW YOU CAN CHANGE YOUR SEARCH SETTINGS
##########################################################
# Specify the city in folowing format: city, municipatily abreviation (e.g. "Ede, GL")
city <- "Ede, GL"
# Specify searctype (choose one from: cafe, conviniece_store, food, grocery_or_supermarket,
# liquor_store, meal_delivery, meal_takeaway, restaurant, store )
searchtype <- "grocery_or_supermarket"
# Specify the radius (in meters)
rad <- 1000
# Add your API key
KEY <- "AIzaSyAcdv2napQhKQoP8pY9nebMkFJTZyeddDs"
##########################################################
# Get longitude and latitute of the centre of the city
CityGeocode <- gGeoCode(city)
LatCity <- CityGeocode[1]
LonCity <- CityGeocode[2]
# Get JSON files with results of the search and save them in the created folder
get.places.API.Loop(lat = LatCity, lon = LonCity, radius = rad, searchtypes = searchtype,
filetype = "json", key = KEY)
# Write results into .csv in folder specified as argument
JsonToCsvWriter("Data/placesAPIWedJan", searchtype, city)
API = (read.csv("Data/placesAPIWedJan/placesAPIWedJansupermarketEde.csv", header = TRUE))
API
# Check column names
names(API)
basicmapmaker(location = 'Wageningen , GL',csvfile = "Data/placesAPIWedJan//placesAPIWedJansupermarketWageningen.csv",zoom = 14,maptype = 'toner',title = "Ede Supermarkets 1km from Centre")
# Specify the city in folowing format: city, municipatily abreviation (e.g. "Ede, GL")
city <- "Ede, GL"
# Specify searctype (choose one from: cafe, conviniece_store, food, grocery_or_supermarket,
# liquor_store, meal_delivery, meal_takeaway, restaurant, store )
searchtype <- "food"
# Specify the radius (in meters)
rad <- 1000
# Add your API key
KEY <- "AIzaSyAcdv2napQhKQoP8pY9nebMkFJTZyeddDs"
##########################################################
# Get longitude and latitute of the centre of the city
CityGeocode <- gGeoCode(city)
LatCity <- CityGeocode[1]
LonCity <- CityGeocode[2]
# Get JSON files with results of the search and save them in the created folder
get.places.API.Loop(lat = LatCity, lon = LonCity, radius = rad, searchtypes = searchtype,
filetype = "json", key = KEY)
# Write results into .csv in folder specified as argument
JsonToCsvWriter("Data/placesAPIWedJan", searchtype, city)
# Read created .csv
API = (read.csv("Data/placesAPIWedJan/placesAPIWedJansupermarketEde.csv", header = TRUE))
API
# Check column names
names(API)
basicmapmaker(location = 'Wageningen , GL',csvfile = "Data/placesAPIWedJan//placesAPIWedJansupermarketWageningen.csv",zoom = 14,maptype = 'toner',title = "Ede Supermarkets 1km from Centre")
# Specify the city in folowing format: city, municipatily abreviation (e.g. "Ede, GL")
city <- "Ede, GL"
# Specify searctype (choose one from: cafe, conviniece_store, food, grocery_or_supermarket,
# liquor_store, meal_delivery, meal_takeaway, restaurant, store )
searchtype <- "food"
# Specify the radius (in meters)
rad <- 1000
# Add your API key
KEY <- "AIzaSyAcdv2napQhKQoP8pY9nebMkFJTZyeddDs"
##########################################################
# Get longitude and latitute of the centre of the city
CityGeocode <- gGeoCode(city)
LatCity <- CityGeocode[1]
LonCity <- CityGeocode[2]
# Get JSON files with results of the search and save them in the created folder
get.places.API.Loop(lat = LatCity, lon = LonCity, radius = rad, searchtypes = searchtype,
filetype = "json", key = KEY)
# Write results into .csv in folder specified as argument
JsonToCsvWriter("Data/placesAPIWedJan", searchtype, city)
# Read created .csv
API = (read.csv("Data/placesAPIWedJan/placesAPIWedJanfoodEde.csv", header = TRUE))
API
# Check column names
names(API)
basicmapmaker(location = city,csvfile = "Data/placesAPIWedJan//placesAPIWedJanfoodEde.csv",
zoom = 14,maptype = 'toner',title = "Ede Supermarkets 1km from Centre") # automate naming!
city <- "Ede, GL"
# Specify searctype (choose one from: cafe, conviniece_store, food, grocery_or_supermarket,
# liquor_store, meal_delivery, meal_takeaway, restaurant, store )
searchtype <- "food"
# Specify the radius (in meters)
rad <- 1000
# Add your API key
KEY <- "AIzaSyAcdv2napQhKQoP8pY9nebMkFJTZyeddDs"
##########################################################
# Get longitude and latitute of the centre of the city
CityGeocode <- gGeoCode(city)
LatCity <- CityGeocode[1]
LonCity <- CityGeocode[2]
# Get JSON files with results of the search and save them in the created folder
get.places.API.Loop(lat = LatCity, lon = LonCity, radius = rad, searchtypes = searchtype,
filetype = "json", key = KEY)
# Write results into .csv in folder specified as argument
JsonToCsvWriter("Data/placesAPIWedJan", searchtype, "Ede")
# Read created .csv
API = (read.csv("Data/placesAPIWedJan/placesAPIWedJanfoodEde.csv", header = TRUE))
API
# Check column names
names(API)
basicmapmaker(location = city,csvfile = "Data/placesAPIWedJan//placesAPIWedJanfoodEde.csv",
zoom = 14,maptype = 'toner',title = "Ede Supermarkets 1km from Centre") # automate naming!
CityGeocode <- gGeoCode(city)
LatCity <- CityGeocode[1]
get.places.API.Loop(lat = LatCity, lon = LonCity, radius = rad, searchtypes = searchtype,
filetype = "json", key = KEY)
JsonToCsvWriter("Data/placesAPIWedJan", searchtype, "Ede")
API = (read.csv("Data/placesAPIWedJan/placesAPIWedJanfoodEde.csv", header = TRUE))
API
names(API)
basicmapmaker(location = city,csvfile = "Data/placesAPIWedJan//placesAPIWedJanfoodEde.csv",
zoom = 14,maptype = 'toner',title = "Ede Supermarkets 1km from Centre") # automate naming!
basicmapmaker(location = city,csvfile = "Data/placesAPIWedJan//placesAPIWedJanfoodEde.csv",
zoom = 14,maptype = 'toner',title = "Ede Supermarkets 1km from Centre") # automate naming!
basicmapmaker(location = city,csvfile = "Data/placesAPIWedJan//placesAPIWedJanfoodEde.csv",
zoom = 14,maptype = 'toner',title = "Ede Supermarkets 1km from Centre") # automate naming!
basicmapmaker(location = city,csvfile = "Data/placesAPIWedJan//placesAPIWedJanfoodEde.csv",
zoom = 14,maptype = 'toner',title = "Ede Supermarkets 1km from Centre") # automate naming!
basicmapmaker(location = city,csvfile = "Data/placesAPIWedJan//placesAPIWedJanfoodEde.csv",
zoom = 14,maptype = 'toner',title = "Ede Supermarkets 1km from Centre") # automate naming!
basicmapmaker(location = city,csvfile = "Data/placesAPIWedJan//placesAPIWedJanfoodEde.csv",
zoom = 14,maptype = 'toner',title = "Ede Food 1km from Centre") # automate naming!
# Team: ZeaPol
# Team Members: Roeland de Koning / Barbara Sienkiewicz
# Date: 29/01/2015
# Final_Project
##########################################################
# Check working directory
getwd()
# If necessary, change directory by:
#setwd()
# Load libraries
library(RCurl)
library(RJSONIO)
library(plyr)
library(ggplot2)
library(ggmap)
library(maps)
library(sp)
library(rgdal)
library(RgoogleMaps)
library(mapproj)
# Functions used
source("R/GeocodeLocater.R")
source("R/APIget.R")
source("R/APIgetLoop.R")
source("R/Sleep.R")
source("R/JsontoCsvWriter.R")
source("R/BasicMapMaker.R")
##########################################################
# BELOW YOU CAN CHANGE SEARCH SETTINGS #
##########################################################
# Specify the city in folowing format: city, municipatily abreviation (e.g."Ede, GL")
city <- "Arnhem, GL"
# Specify searctype (choose one from: cafe, conviniece_store, food, grocery_or_supermarket,
# liquor_store, meal_delivery, meal_takeaway, restaurant, store)
searchtype <- "restaurant"
# Specify the radius (in meters)
rad <- 1000
# Add your API key
KEY <- "AIzaSyAcdv2napQhKQoP8pY9nebMkFJTZyeddDs"
# Specify map title
MapTitle <- "Arnhem Restaurants 1km from Centre"
##########################################################
# Get longitude and latitute of the centre of the city
CityGeocode <- gGeoCode(city)
LatCity <- CityGeocode[1]
LonCity <- CityGeocode[2]
# Get JSON files with results of the search and save them in the created folder
get.places.API.Loop(lat = LatCity, lon = LonCity, radius = rad, searchtypes = searchtype,
filetype = "json", key = KEY)
# Write results into .csv in folder specified as argument
filename <- JsonToCsvWriter("Data/placesAPIWedJan", searchtype, "Ede")
# Read created .csv
API = (read.csv(filename, header = TRUE))
API
# Check column names
names(API)
# Plot results
basicmapmaker(location = city,csvfile = filename,
zoom = 14,maptype = 'toner',title = MapTitle) # automate naming!
basicmapmaker(location = city,csvfile = filename,
zoom = 15,maptype = 'toner',title = MapTitle) # automate naming!
basicmapmaker(location = city,csvfile = filename,
zoom = 15,maptype = 'burningmap',title = MapTitle) # automate naming!
basicmapmaker(location = city,csvfile = filename,
zoom = 15,maptype = 'watercolor',title = MapTitle) # automate naming!
get.places.API.Loop(lat = LatCity, lon = LonCity, radius = rad, searchtypes = searchtype,
filetype = "json", key = KEY)
# Write results into .csv in folder specified as argument
filename <- JsonToCsvWriter("Data/placesAPIWedJan", searchtype, city)
# Read created .csv
API = (read.csv(filename, header = TRUE))
API
# Check column names
names(API)
# Plot results
basicmapmaker(location = city,csvfile = filename,
zoom = 15,maptype = 'watercolor',title = MapTitle) # automate naming!
a <- basicmapmaker(location = city,csvfile = filename,
zoom = 15,maptype = 'watercolor',title = MapTitle) # automate naming!
a <- basicmapmaker(location = city,csvflie = filename,
a <- basicmapmaker(location = city,csvfile = filename,
zoom = 15,maptype = 'tonor',title = MapTitle) # automate naming!
a <- basicmapmaker(location = city,csvfile = filename,
zoom = 15,maptype = 'tonor',title = MapTitle) # automate naming!
a <- basicmapmaker(location = city,csvfile = filename,
zoom = 15,maptype = 'toner',title = MapTitle) # automate naming!
a@data
a
source("R/BasicMapMaker.R")
a <- basicmapmaker(location = city,csvfile = filename,
zoom = Zoom,maptype = 'toner',title = MapTitle) # automate naming!
source("R/BasicMapMaker.R")
outputfile <- paste("output/",title,".png")
outputfile <- paste("output/",title,".png")
outputfile <- paste("output/",title)
outputfile <- paste("output/","title",".png")
a <- basicmapmaker(location = city,csvfile = filename,
zoom = Zoom,maptype = 'toner',title = MapTitle) # automate naming!
a <- basicmapmaker(location = city,csvfile = filename,
zoom = zoom,maptype = 'toner',title = MapTitle) # automate naming!
a <- basicmapmaker(location = city,csvfile = filename,
zoom = zoom,maptype = 'toner',title = MapTitle) # automate naming!
a <- basicmapmaker(location = city,csvfile = filename,
zoom = 12,maptype = 'toner',title = MapTitle) # automate naming!
a <- basicmapmaker(location = city,csvfile = filename,
zoom = zoom,maptype = 'toner',title = MapTitle) # automate naming!
a <- basicmapmaker(location = city,csvfile = filename,
zoom = zoom ,maptype = 'toner',title = MapTitle) # automate naming!
zoom = 14
a <- basicmapmaker(location = city,csvfile = filename,
zoom = zoom ,maptype = 'toner',title = MapTitle) # automate naming!
csvLocation <- "Data/placesAPI28Jan"
source("R/BasicMapMaker.R")
outputfile
source("R/BasicMapMaker.R")
source("R/BasicMapMaker.R")
a <- basicmapmaker(location = city,csvfile = filename,
zoom = zoom ,maptype = 'toner',title = MapTitle) # automate naming!
source("R/BasicMapMaker.R")
a <- basicmapmaker(location = city,csvfile = filename,
zoom = zoom ,maptype = 'toner',title = MapTitle) # automate naming!
a <- basicmapmaker(location = city,csvfile = filename,
zoom = zoom ,maptype = 'toner',MapTitle = MapTitle) # automate naming!
source("R/BasicMapMaker.R")
a <- basicmapmaker(location = city,csvfile = filename,
zoom = zoom ,maptype = 'toner',MapTitle = MapTitle) # automate naming!
source("R/BasicMapMaker.R")
a <- basicmapmaker(location = city,csvfile = filename,
zoom = zoom ,maptype = 'toner',MapTitle = MapTitle) # automate naming!
source("R/BasicMapMaker.R")
a <- basicmapmaker(location = city,csvfile = filename,
zoom = zoom ,maptype = 'toner',MapTitle = MapTitle) # automate naming!
zoom = 15
source("R/BasicMapMaker.R")
basicmapmaker(location = city,csvfile = filename,
zoom = zoom ,maptype = 'toner',MapTitle = MapTitle) # automate naming!
source("R/BasicMapMaker.R")
basicmapmaker(location = city,csvfile = filename,
zoom = zoom ,maptype = 'toner',MapTitle = MapTitle) # automate naming!
source("R/BasicMapMaker.R")
city <- "Arnhem, GL"
searchtype <- "restaurant"
rad <- 1000
KEY <- "AIzaSyAcdv2napQhKQoP8pY9nebMkFJTZyeddDs"
MapTitle <- "Arnhem Restaurants 1km from Centre"
zoom = 15
basicmapmaker(location = city,csvfile = filename,
zoom = zoom ,maptype = 'toner',MapTitle = MapTitle) # automate naming!
source("R/BasicMapMaker.R")
basicmapmaker(location = city,csvfile = filename,
zoom = zoom ,maptype = 'toner',MapTitle = MapTitle) # automate naming!
source("R/BasicMapMaker.R")
basicmapmaker(location = city,csvfile = filename,
zoom = zoom ,maptype = 'toner',MapTitle = MapTitle) # automate naming!
source("R/BasicMapMaker.R")
basicmapmaker(location = city,csvfile = filename,
zoom = zoom ,maptype = 'toner',MapTitle = MapTitle) # automate naming!
library('ReadImages')
install.packages("readimages")
install.packages("jpeg")
library(jpeg)
source("R/BasicMapMaker.R")
basicmapmaker(location = city,csvfile = filename,
zoom = zoom ,maptype = 'toner',MapTitle = MapTitle) # automate naming!
source("R/BasicMapMaker.R")
basicmapmaker(location = city,csvfile = filename,
zoom = zoom ,maptype = 'toner',MapTitle = MapTitle) # automate naming!
source("R/BasicMapMaker.R")
basicmapmaker(location = city,csvfile = filename,
zoom = zoom ,maptype = 'toner',MapTitle = MapTitle) # automate naming!
source("R/BasicMapMaker.R")
basicmapmaker(location = city,csvfile = filename,
zoom = zoom ,maptype = 'toner',MapTitle = MapTitle) # automate naming!
source("R/BasicMapMaker.R")
outputlocation <- basicmapmaker(location = city,csvfile = filename,
zoom = zoom ,maptype = 'toner',MapTitle = MapTitle) # automate naming!
image <- readJPEG(outputlocation)
plot(image)
zoom = 14
outputlocation <- basicmapmaker(location = city,csvfile = filename,
zoom = zoom ,maptype = 'toner',MapTitle = MapTitle) # automate naming!
image <- readJPEG(outputlocation)
plot(image)
outputlocation <- basicmapmaker(location = city,csvfile = "Data/placesAPIWedJan//placesAPIWedJangrocery_or_supermarketEde,GL.csv",
zoom = zoom ,maptype = 'toner',MapTitle = MapTitle) # automate naming!
image <- readJPEG(outputlocation)
plot(image)
