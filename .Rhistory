MapTitle <- "Ede grocery and supermarket 1km from Centre"
## Specify zoom level of the map, ranges from 0 (whole world) to 21 (building)
zoom = 14
csvlocation <- "Data/placesAPIWedJan28"
################################################################################################
################################################################################################
## Get longitude and latitute of the centre of the city
CityGeocode <- gGeoCode(city)
LatCity <- CityGeocode[1]
LonCity <- CityGeocode[2]
##Get JSON files with results of the search and save them in the created folder
get.places.API.Loop(lat = LatCity, lon = LonCity, radius = rad, searchtypes = searchtype,
filetype = "json", key = KEY)
## Write results into .csv in folder specified as argument
filename <- JsonToCsvWriter(filelocation =  csvlocation,categoryidentifier =  searchtype,locationidentifier =  city)
## Read created .csv
API = (read.csv(filename, header = TRUE))
head(API)
## Check column names
names(API)
## Plot results
outputlocation <- basicmapmaker(location = city,csvfile = filename,
zoom = zoom ,maptype = 'terrain',MapTitle = MapTitle) # automate naming!
image <- readJPEG(outputlocation)
source("R/BasicMapMaker.R")
## Plot results
outputlocation <- basicmapmaker(location = city,csvfile = filename,
zoom = zoom ,maptype = 'terrain',MapTitle = MapTitle) # automate naming!
outputlocation <- basicmapmaker(location = city,csvfile = filename,
zoom = zoom ,maptype = 'toner',MapTitle = MapTitle) # automate naming!
source("R/BasicMapMaker.R")
outputlocation <- basicmapmaker(location = city,csvfile = filename,
zoom = zoom ,maptype = 'toner',MapTitle = MapTitle) # automate naming!
source("R/BasicMapMaker.R")
outputlocation <- basicmapmaker(location = city,csvfile = filename,
zoom = zoom ,maptype = 'toner',MapTitle = MapTitle) # automate naming!
source("R/BasicMapMaker.R")
outputlocation <- basicmapmaker(location = city,csvfile = filename,
zoom = zoom ,maptype = 'toner',MapTitle = MapTitle) # automate naming!
source("R/BasicMapMaker.R")
outputlocation <- basicmapmaker(location = city,csvfile = filename,
zoom = zoom ,maptype = 'toner',MapTitle = MapTitle)
## Team: ZeaPol
## Team Members: Roeland de Koning / Barbara Sienkiewicz
## Date: 29/01/2015
## Final_Project
#######################################################################################################
## Check working directory
getwd()
## If necessary, change directory by:
##setwd()
## Load libraries
library(RCurl)
library(RJSONIO)
library(plyr)
library(ggplot2)
library(ggmap)
library(maps)
library(sp)
library(rgdal)
library(RgoogleMaps)
library(mapproj)
library(jpeg)
## Functions used
source("R/GeocodeLocater.R")
source("R/APIget.R")
source("R/APIgetLoop.R")
source("R/Sleep.R")
source("R/JsontoCsvWriter.R")
source("R/BasicMapMaker.R")
######################################################################################################
## BELOW YOU CAN CHANGE SEARCH SETTINGS #
######################################################################################################
## Specify the city in folowing format: city, municipatily abreviation (e.g."Ede, GL")
city <- "Ede, GL"
## Specify searctype (choose one from: cafe, conveiniece_store, food, grocery_or_supermarket,
## liquor_store, meal_delivery, meal_takeaway, restaurant, store)
searchtype <- "grocery_or_supermarket"
## Specify the radius (in meters)
rad <- 1000
## Add your API key
KEY <- "AIzaSyAcdv2napQhKQoP8pY9nebMkFJTZyeddDs"
## Specify map title
MapTitle <- "Ede grocery and supermarket 1km from Centre"
## Specify zoom level of the map, ranges from 0 (whole world) to 21 (building)
zoom = 14
csvlocation <- "Data/placesAPIWedJan28"
################################################################################################
################################################################################################
## Get longitude and latitute of the centre of the city
CityGeocode <- gGeoCode(city)
LatCity <- CityGeocode[1]
LonCity <- CityGeocode[2]
##Get JSON files with results of the search and save them in the created folder
get.places.API.Loop(lat = LatCity, lon = LonCity, radius = rad, searchtypes = searchtype,
filetype = "json", key = KEY)
## Write results into .csv in folder specified as argument
filename <- JsonToCsvWriter(filelocation =  csvlocation,categoryidentifier =  searchtype,locationidentifier =  city)
## Read created .csv
API = (read.csv(filename, header = TRUE))
head(API)
## Check column names
names(API)
## Plot results
outputlocation <- basicmapmaker(location = city,csvfile = filename,
zoom = zoom ,maptype = 'toner',MapTitle = MapTitle)
library(jpeg)
source("R/BasicMapMaker.R")
## Plot results
outputlocation <- basicmapmaker(location = city,csvfile = filename,
zoom = zoom ,maptype = 'toner',MapTitle = MapTitle)
font()
fonts()
source("R/BasicMapMaker.R")
outputlocation <- basicmapmaker(location = city,csvfile = filename,
zoom = zoom ,maptype = 'toner',MapTitle = MapTitle)
library(sp)
library(rgdal)
# combine coordinates in single matrix
coords <- cbind(API$lon, API$lat)
# make spatial points object
prj_string_WGS <- CRS("+proj=longlat +datum=WGS84")
mypoints <- SpatialPoints(coords, proj4string=prj_string_WGS)
# inspect object
class(mypoints)
str(mypoints)
# create and display some attribute data and store in a data frame
mydata <- data.frame(Name = (API$name))
mydata
mypoints
# make spatial points data frame
mypointsdf <- SpatialPointsDataFrame(
coords, data = mydata,
proj4string=prj_string_WGS)
class(mypointsdf) # inspect and plot object
names(mypointsdf)
str(mypointsdf)
spplot(mypointsdf, zcol="Name", color = "red",
xlim = bbox(mypointsdf)[1, ]+c(-0.01,0.01),
ylim = bbox(mypointsdf)[2, ]+c(-0.01,0.01),
scales= list(draw = TRUE))
dir.create("data", showWarnings = FALSE)
writeOGR(mypointsdf, file.path("data","mypointsGE.kml"),
"mypointsGE", driver="KML", overwrite_layer=TRUE)
for (k in 1:length(file.list)) {
pnt1_rd <- coordinates(mypointsRD)[1,]
pnt2_rd <- coordinates(mypointsRD)[2,]
for (i in 1:length(mypointsRD)) {
pointrd[i] <- coordinates(mypointsRD[i])
circlex[i] <- pnt1_rd[i] + cos(ang) * 200
circley[i] <- pnt1_rd[i] + sin(ang) * 200
c[i] <- cbind(circlex[i], circley[i])
}
prj_string_RD <- CRS("+proj=sterea +lat_0=52.15616055555555 +lon_0=5.38763888888889 +k=0.9999079 +x_0=155000 +y_0=463000 +ellps=bessel +towgs84=565.2369,50.0087,465.658,-0.406857330322398,0.350732676542563,-1.8703473836068,4.0812 +units=m +no_defs")
mypointsRD <- spTransform(mypointsdf, prj_string_RD)
ang <- pi*0:200/100
# make circles around points, with radius equal to distance between points
# define a series of angles going from 0 to 2pi
for (i in 1:length(mypointsRD)) {
pointrd[i] <- coordinates(mypointsRD[i])
circlex[i] <- pnt1_rd[i] + cos(ang) * 200
circley[i] <- pnt1_rd[i] + sin(ang) * 200
c[i] <- cbind(circlex[i], circley[i])
}
pointrd <- list()
circlex <- list()
circley <- list()
bufferlist <- list()
pointrd <- list()
circlex <- list()
circley <- list()
bufferlist <- list()
for (i in 1:length(mypointsRD)) {
pointrd[i] <- coordinates(mypointsRD[i])
circlex[i] <- pointrd[1] + cos(ang) * 200
circley[i] <- pointrd[2] + sin(ang) * 200
}
ang <- pi*0:200/100
for (i in 1:length(mypointsRD)) {
pointrd[i] <- coordinates(mypointsRD[i])
circlex[i] <- pointrd[1] + cos(ang) * 200
circley[i] <- pointrd[2] + sin(ang) * 200
}
mypointsRD
mypointsRD[1]
mypointsRD[1][1]
mypointsRD[[1]][1]
mypointsRD[[1]]
mypointsRD[[1]][1]
mypointsRD[[1]][2]
mypointsRD[[0]][2]
mypointsRD[[1]][2]
mypointsRD[[1]]
coordinates(mypointsRD)
a<-coordinates(mypointsRD)
a[1]
a[2]
a[1][1]
a[1][[1]]
a[[1]][[1]]
a[[1]]
a<-coordinates(mypointsRD[1])
a
a<-coordinates(mypointsRD)[1]
a
a<-coordinates(mypointsRD)[2]
a
a<-coordinates(mypointsRD)[2,]
a
a<-coordinates(mypointsRD)[1,]
a
a[1]
a[2]
for (i in 1:length(mypointsRD)) {
pointrd <- <-coordinates(mypointsRD)[i,]
circlex[i] <- pointrd[1] + cos(ang) * 200
circley[i] <- pointrd[2] + sin(ang) * 200
}
for (i in 1:length(mypointsRD)) {
pointrd <- coordinates(mypointsRD)[i,]
circlex[i] <- pointrd[1] + cos(ang) * 200
circley[i] <- pointrd[2] + sin(ang) * 200
}
circlex
circley
for (i in 1:length(mypointsRD)) {
pointrd <- coordinates(mypointsRD)[i,]
circlex <- pointrd[1] + cos(ang) * 200
circley <- pointrd[2] + sin(ang) * 200
bufferlist[i] <- <- cbind(circlex, circley)
}
for (i in 1:length(mypointsRD)) {
pointrd <- coordinates(mypointsRD)[i,]
circlex <- pointrd[1] + cos(ang) * 200
circley <- pointrd[2] + sin(ang) * 200
bufferlist[i] <- cbind(circlex, circley)
}
bufferlist
bufferlist <- list()
for (i in 1:length(mypointsRD)) {
pointrd <- coordinates(mypointsRD)[i,]
circlex <- pointrd[1] + cos(ang) * 200
circley <- pointrd[2] + sin(ang) * 200
bufferlist[i] <- rbind(circlex, circley)
}
bufferlist
circley
circlex
circlex <- pointrd[1] + cos(ang) * 200
circlex
circlex <- pointrd[1] + cos(ang) * 200
circlex
circlex <- pointrd[1] + cos(ang) * 200
circlex <- pointrd[1] + cos(ang) * 200
circlex
circlex <- 0
circlex
circlex <- pointrd[1] + cos(ang) * 200
circlex
pointrd <- coordinates(mypointsRD)[i,]
pointrd
circlex <- pointrd[1] + cos(ang) * 200
circlex
bufferlist <- list()
for (i in 1:length(mypointsRD)) {
pointrd <- coordinates(mypointsRD)[i,]
circlex <- pointrd[1] + cos(ang) * 200
circley <- pointrd[2] + sin(ang) * 200
bufferlist[i] <- cbind(circlex, circley)
}
bufferlist
bufferlist[1]
bufferlist[1][1]
bufferlist[[1]][1]
plot(bufferlist, pch = 19, cex = 0.2, col = "red", ylim = range(bufferlist))
points(mypointsRD, pch = 3, col= "darkgreen")
library(sp)
library(rgdal)
library(rgeos)
plot(bufferlist, pch = 19, cex = 0.2, col = "red", ylim = range(bufferlist))
points(mypointsRD, pch = 3, col= "darkgreen")
buffpoint <- gBuffer(mypointsRD[1,], width=500, quadsegs=2)
plot(buffpoint, add = TRUE, lty = 3, lwd = 2, col = "blue")
buffpoint <- gBuffer(mypointsRD[1,], width=500, quadsegs=2)
plot(buffpoint, add = TRUE, lty = 3, lwd = 2, col = "blue")
plot(buffpoint, lty = 3, lwd = 2, col = "blue")
buffpoint <- gBuffer(mypointsRD[1,], width=500, quadsegs=2)
plot(buffpoint, lty = 3, lwd = 2, col = "blue")
buffpoint <- gBuffer(mypointsRD[1,], width=500, quadsegs=2)
plot(mypointsRD[1,], col = "red")
plot(buffpoint, add = TRUE, lty = 3, lwd = 2, col = "blue")
plot("s")
pointrd <- coordinates(mypointsRD)[1,]
circlex <- pointrd[1] + cos(ang) * 200
circley <- pointrd[2] + sin(ang) * 200
buffer <- cbind(circlex, circley)
buffer
plot(buffer, pch = 19, cex = 0.2, col = "red", ylim = range(circlex,circley))
points(mypointsRD, pch = 3, col= "darkgreen")
library(sp)
library(rgdal)
library(rgeos)
# combine coordinates in single matrix
coords <- cbind(API$lon, API$lat)
# make spatial points object
prj_string_WGS <- CRS("+proj=longlat +datum=WGS84")
mypoints <- SpatialPoints(coords, proj4string=prj_string_WGS)
# inspect object
class(mypoints)
str(mypoints)
# create and display some attribute data and store in a data frame
mydata <- data.frame(Name = (API$name))
mydata
mypoints
# make spatial points data frame
mypointsdf <- SpatialPointsDataFrame(
coords, data = mydata,
proj4string=prj_string_WGS)
class(mypointsdf) # inspect and plot object
names(mypointsdf)
str(mypointsdf)
spplot(mypointsdf, zcol="Name", color = "red",
xlim = bbox(mypointsdf)[1, ]+c(-0.01,0.01),
ylim = bbox(mypointsdf)[2, ]+c(-0.01,0.01),
scales= list(draw = TRUE))
dir.create("data", showWarnings = FALSE)
writeOGR(mypointsdf, file.path("data","mypointsGE.kml"),
"mypointsGE", driver="KML", overwrite_layer=TRUE)
prj_string_RD <- CRS("+proj=sterea +lat_0=52.15616055555555 +lon_0=5.38763888888889 +k=0.9999079 +x_0=155000 +y_0=463000 +ellps=bessel +towgs84=565.2369,50.0087,465.658,-0.406857330322398,0.350732676542563,-1.8703473836068,4.0812 +units=m +no_defs")
mypointsRD <- spTransform(mypointsdf, prj_string_RD)
ang <- pi*0:200/100
# make circles around points, with radius equal to distance between points
# define a series of angles going from 0 to 2pi
bufferlist <- list()
#for (i in 1:length(mypointsRD)) {
pointrd <- coordinates(mypointsRD)[1,]
circlex <- pointrd[1] + cos(ang) * 200
circley <- pointrd[2] + sin(ang) * 200
buffer <- cbind(circlex, circley)
#}
#You can plot everything again using basic R plot commands:
plot(buffer, pch = 19, cex = 0.2, col = "red", ylim = range(circlex,circley))
points(mypointsRD, pch = 3, col= "darkgreen")
pointrd <- coordinates(mypointsRD)[1,]
circlex <- pointrd[1] + cos(ang) * 500
circley <- pointrd[2] + sin(ang) * 500
buffer <- cbind(circlex, circley)
plot(buffer, pch = 19, cex = 0.2, col = "red", ylim = range(circlex,circley))
points(mypointsRD, pch = 3, col= "darkgreen")
pointrd <- coordinates(mypointsRD)[1,]
circlex <- pointrd[1] + cos(ang) * 10
circley <- pointrd[2] + sin(ang) * 10
buffer <- cbind(circlex, circley)
plot(buffer, pch = 19, cex = 0.2, col = "red", ylim = range(circlex,circley))
points(mypointsRD, pch = 3, col= "darkgreen")
plot(buffer, pch = 19, cex = 0.2, col = "red", ylim = range(circley))
points(mypointsRD, pch = 3, col= "darkgreen")
pointrd <- coordinates(mypointsRD)[1,]
circlex <- pointrd[1] + cos(ang) * 500
circley <- pointrd[2] + sin(ang) * 500
plot(buffer, pch = 19, cex = 0.2, col = "red", ylim = range(circley))
points(mypointsRD, pch = 3, col= "darkgreen")
pointrd <- coordinates(mypointsRD)[1,]
circlex <- pointrd[1] + cos(ang) * 50
circley <- pointrd[2] + sin(ang) * 50
buffer <- cbind(circlex, circley)
plot(buffer, pch = 19, cex = 0.2, col = "red", ylim = range(circley))
points(mypointsRD, pch = 3, col= "darkgreen")
row.names(mypointsRD)
circlelist <- list()
circlelist <- list()
for (i in 1:length(mypointsRD)) {
pointrd <- coordinates(mypointsRD)[i,]
circlex <- pointrd[1] + cos(ang) * 50
circley <- pointrd[2] + sin(ang) * 50
circlexy <- cbind(circlex, circley)
circle <- Polygons(list(Polygon(cbind(circlex, circley))),"1")
circlelist[i] <- circle
circlelist <- list()
for (i in 1:length(mypointsRD)) {
pointrd <- coordinates(mypointsRD)[i,]
circlex <- pointrd[1] + cos(ang) * 50
circley <- pointrd[2] + sin(ang) * 50
circlexy <- cbind(circlex, circley)
circle <- Polygons(list(Polygon(cbind(circlex, circley))),"1")
circlelist[i] <- circle
}
spcircles <- SpatialPolygons(circlelist), proj4string=prj_string_RD)
circledat <- data.frame(mypointsRD@data, row.names= row.names(mypointsRD))
circlesdf <- SpatialPolygonsDataFrame(spcircles, circledat)
spcircles <- SpatialPolygons(list(circlelist)), proj4string=prj_string_RD)
spcircles <- SpatialPolygons(Srl = circlelist, proj4string=prj_string_RD)
circlelist
spcircles <- SpatialPolygons(Srl = circlelist, proj4string=prj_string_RD)
circlelist <- list()
for (i in 1:length(mypointsRD)) {
pointrd <- coordinates(mypointsRD)[i,]
circlex <- pointrd[1] + cos(ang) * 50
circley <- pointrd[2] + sin(ang) * 50
circlexy <- cbind(circlex, circley)
circle <- Polygons(list(Polygon(cbind(circlex, circley))), i)
circlelist[i] <- circle
}
spcircles <- SpatialPolygons(Srl = circlelist, proj4string=prj_string_RD)
circledat <- data.frame(mypointsRD@data, row.names= row.names(mypointsRD))
circlesdf <- SpatialPolygonsDataFrame(spcircles, circledat)
plot(circlesdf, col = c("gray60", "gray40"))
plot(mypointsRD, add = TRUE, col="red", pch=19, cex=1.5)
box()
spplot(circlesdf, zcol="Name", col.regions=c("green", "red"))
spplot(circlesdf, zcol="Name", colorRamp=c("green", "red"))
spplot(circlesdf, zcol="Name", colorRamp)
"
spplot(circlesdf, zcol="Name", colorRamp=c("green", "red"))
myintersection <- gIntersection(circlesdf[1,], mypointsRD)
plot(myintersection, col="blue")
writeOGR(circlesdf, file.path("data","circles.kml"),
"circles", driver="KML", overwrite_layer=TRUE)
CIRCLESDF <- spTransform(circlesdf, prj_string_WGS)
writeOGR(CIRCLESDF, file.path("data","circles.kml"),
"circles", driver="KML", overwrite_layer=TRUE)
pg
## Team: ZeaPol
## Team Members: Roeland de Koning / Barbara Sienkiewicz
## Date: 29/01/2015
## Final_Project
#######################################################################################################
## Check working directory
getwd()
## If necessary, change directory by:
##setwd()
## Load libraries
library(RCurl)
library(RJSONIO)
library(plyr)
library(ggplot2)
library(ggmap)
library(maps)
library(sp)
library(rgdal)
library(RgoogleMaps)
library(mapproj)
library(jpeg)
## Functions used
source("R/GeocodeLocater.R")
source("R/APIget.R")
source("R/APIgetLoop.R")
source("R/Sleep.R")
source("R/JsontoCsvWriter.R")
source("R/BasicMapMaker.R")
######################################################################################################
## BELOW YOU CAN CHANGE SEARCH SETTINGS #
######################################################################################################
## Specify the city in folowing format: city, municipatily abreviation (e.g."Ede, GL")
city <- "Ede, GL"
## Specify searctype (choose one from: cafe, conveiniece_store, food, grocery_or_supermarket,
## liquor_store, meal_delivery, meal_takeaway, restaurant, store)
searchtype <- "grocery_or_supermarket"
## Specify the radius (in meters)
rad <- 1000
## Add your API key
KEY <- "AIzaSyAcdv2napQhKQoP8pY9nebMkFJTZyeddDs"
## Specify map title
MapTitle <- "Ede grocery and supermarket 1km from Centre"
## Specify zoom level of the map, ranges from 0 (whole world) to 21 (building)
zoom = 14
csvlocation <- "Data/placesAPIWedJan28"
################################################################################################
################################################################################################
## Get longitude and latitute of the centre of the city
CityGeocode <- gGeoCode(city)
LatCity <- CityGeocode[1]
LonCity <- CityGeocode[2]
##Get JSON files with results of the search and save them in the created folder
get.places.API.Loop(lat = LatCity, lon = LonCity, radius = rad, searchtypes = searchtype,
filetype = "json", key = KEY)
## Write results into .csv in folder specified as argument
filename <- JsonToCsvWriter(filelocation =  csvlocation,categoryidentifier =  searchtype,locationidentifier =  city)
## Read created .csv
API = (read.csv(filename, header = TRUE))
head(API)
## Check column names
names(API)
## Plot results
outputlocation <- basicmapmaker(location = city,csvfile = filename,
zoom = zoom ,maptype = 'toner',MapTitle = MapTitle)
image <- readJPEG(outputlocation)
pg
pg <- get_map(location = location ,
zoom = zoom,
source = 'stamen', # try 'google' or 'osm'
maptype = maptype,
color = 'color'
)
pg <- get_map(location = Netherland ,
zoom = 8,
source = 'stamen', # try 'google' or 'osm'
maptype = toner,
color = 'color'
)
pg <- get_map(location = Netherland ,
zoom = 8,
source = 'stamen', # try 'google' or 'osm'
maptype = 'toner',
color = 'color'
)
pg <- get_map(location = 'Netherland' ,
zoom = 8,
source = 'stamen', # try 'google' or 'osm'
maptype = 'toner',
color = 'color'
)
