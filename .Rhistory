filetype = "json", key = KEY)
## Write results into .csv in folder specified as argument
filename <- JsonToCsvWriter(filelocation =  csvlocation,categoryidentifier =  searchtype,locationidentifier =  city)
## Read created .csv
API = (read.csv(filename, header = TRUE))
API
## Check column names
names(API)
## Plot results
outputlocation <- basicmapmaker(location = city,csvfile = filename,
zoom = zoom ,maptype = 'toner',MapTitle = MapTitle) # automate naming!
image <- readJPEG(outputlocation)
plot(image)
city <- "Arnhem, GL"
## Specify searctype (choose one from: cafe, conveiniece_store, food, grocery_or_supermarket,
## liquor_store, meal_delivery, meal_takeaway, restaurant, store)
searchtype <- "store"
## Specify the radius (in meters)
rad <- 5000
## Add your API key
KEY <- "AIzaSyAcdv2napQhKQoP8pY9nebMkFJTZyeddDs"
## Specify map title
MapTitle <- "Arnhem store 5km from Centre"
## Specify zoom level of the map, ranges from 0 (whole world) to 21 (building)
zoom = 12
csvlocation <- "Data/placesAPIWedJan28"
################################################################################################
################################################################################################
## Get longitude and latitute of the centre of the city
CityGeocode <- gGeoCode(city)
LatCity <- CityGeocode[1]
LonCity <- CityGeocode[2]
##Get JSON files with results of the search and save them in the created folder
get.places.API.Loop(lat = LatCity, lon = LonCity, radius = rad, searchtypes = searchtype,
filetype = "json", key = KEY)
city <- "Arnhem, GL"
## Specify searctype (choose one from: cafe, conveiniece_store, food, grocery_or_supermarket,
## liquor_store, meal_delivery, meal_takeaway, restaurant, store)
searchtype <- "store"
## Specify the radius (in meters)
rad <- 5000
## Add your API key
KEY <- "AIzaSyAcdv2napQhKQoP8pY9nebMkFJTZyeddDs"
## Specify map title
MapTitle <- "Arnhem store 5km from Centre"
## Specify zoom level of the map, ranges from 0 (whole world) to 21 (building)
zoom = 12
csvlocation <- "Data/placesAPIWedJan28"
################################################################################################
################################################################################################
## Get longitude and latitute of the centre of the city
CityGeocode <- gGeoCode(city)
LatCity <- CityGeocode[1]
LonCity <- CityGeocode[2]
##Get JSON files with results of the search and save them in the created folder
get.places.API.Loop(lat = LatCity, lon = LonCity, radius = rad, searchtypes = searchtype,
filetype = "json", key = KEY)
city <- "Arnhem, GL"
## Specify searctype (choose one from: cafe, conveiniece_store, food, grocery_or_supermarket,
## liquor_store, meal_delivery, meal_takeaway, restaurant, store)
searchtype <- "store"
## Specify the radius (in meters)
rad <- 5000
## Add your API key
KEY <- "AIzaSyAcdv2napQhKQoP8pY9nebMkFJTZyeddDs"
## Specify map title
MapTitle <- "Arnhem store 5km from Centre"
## Specify zoom level of the map, ranges from 0 (whole world) to 21 (building)
zoom = 12
csvlocation <- "Data/placesAPIWedJan28"
################################################################################################
################################################################################################
## Get longitude and latitute of the centre of the city
CityGeocode <- gGeoCode(city)
LatCity <- CityGeocode[1]
LonCity <- CityGeocode[2]
##Get JSON files with results of the search and save them in the created folder
get.places.API.Loop(lat = LatCity, lon = LonCity, radius = rad, searchtypes = searchtype,
filetype = "json", key = KEY)
filename <- JsonToCsvWriter(filelocation =  csvlocation,categoryidentifier =  searchtype,locationidentifier =  city)
API = (read.csv(filename, header = TRUE))
API
## Check column names
names(API)
## Plot results
outputlocation <- basicmapmaker(location = city,csvfile = filename,
zoom = zoom ,maptype = 'toner',MapTitle = MapTitle) # automate naming!
image <- readJPEG(outputlocation)
city <- "Arnhem, GL"
## Specify searctype (choose one from: cafe, conveiniece_store, food, grocery_or_supermarket,
## liquor_store, meal_delivery, meal_takeaway, restaurant, store)
searchtype <- "store"
## Specify the radius (in meters)
rad <- 5000
## Add your API key
KEY <- "AIzaSyAcdv2napQhKQoP8pY9nebMkFJTZyeddDs"
## Specify map title
MapTitle <- "Arnhem store 5km from Centrecheck"
## Specify zoom level of the map, ranges from 0 (whole world) to 21 (building)
zoom = 12
csvlocation <- "Data/placesAPIWedJan28"
################################################################################################
################################################################################################
## Get longitude and latitute of the centre of the city
CityGeocode <- gGeoCode(city)
LatCity <- CityGeocode[1]
LonCity <- CityGeocode[2]
##Get JSON files with results of the search and save them in the created folder
get.places.API.Loop(lat = LatCity, lon = LonCity, radius = rad, searchtypes = searchtype,
filetype = "json", key = KEY)
## Write results into .csv in folder specified as argument
filename <- JsonToCsvWriter(filelocation =  csvlocation,categoryidentifier =  searchtype,locationidentifier =  city)
## Read created .csv
API = (read.csv(filename, header = TRUE))
API
## Check column names
names(API)
## Plot results
outputlocation <- basicmapmaker(location = city,csvfile = filename,
zoom = zoom ,maptype = 'toner',MapTitle = MapTitle) # automate naming!
image <- readJPEG(outputlocation)
## Team: ZeaPol
## Team Members: Roeland de Koning / Barbara Sienkiewicz
## Date: 29/01/2015
## Final_Project
#######################################################################################################
## Check working directory
getwd()
## If necessary, change directory by:
##setwd()
## Load libraries
library(RCurl)
library(RJSONIO)
library(plyr)
library(ggplot2)
library(ggmap)
library(maps)
library(sp)
library(rgdal)
library(RgoogleMaps)
library(mapproj)
library(jpeg)
## Functions used
source("R/GeocodeLocater.R")
source("R/APIget.R")
source("R/APIgetLoop.R")
source("R/Sleep.R")
source("R/JsontoCsvWriter.R")
source("R/BasicMapMaker.R")
######################################################################################################
## BELOW YOU CAN CHANGE SEARCH SETTINGS #
######################################################################################################
## Specify the city in folowing format: city, municipatily abreviation (e.g."Ede, GL")
city <- "Arnhem, GL"
## Specify searctype (choose one from: cafe, conveiniece_store, food, grocery_or_supermarket,
## liquor_store, meal_delivery, meal_takeaway, restaurant, store)
searchtype <- "store"
## Specify the radius (in meters)
rad <- 5000
## Add your API key
KEY <- "AIzaSyAcdv2napQhKQoP8pY9nebMkFJTZyeddDs"
## Specify map title
MapTitle <- "Arnhem store 5km from Centre"
## Specify zoom level of the map, ranges from 0 (whole world) to 21 (building)
zoom = 12
csvlocation <- "Data/placesAPIWedJan28"
################################################################################################
################################################################################################
## Get longitude and latitute of the centre of the city
CityGeocode <- gGeoCode(city)
LatCity <- CityGeocode[1]
LonCity <- CityGeocode[2]
##Get JSON files with results of the search and save them in the created folder
get.places.API.Loop(lat = LatCity, lon = LonCity, radius = rad, searchtypes = searchtype,
filetype = "json", key = KEY)
## Write results into .csv in folder specified as argument
filename <- JsonToCsvWriter(filelocation =  csvlocation,categoryidentifier =  searchtype,locationidentifier =  city)
## Read created .csv
API = (read.csv(filename, header = TRUE))
API
## Check column names
names(API)
## Plot results
outputlocation <- basicmapmaker(location = city,csvfile = filename,
zoom = zoom ,maptype = 'toner',MapTitle = MapTitle) # automate naming!
image <- readJPEG(outputlocation)
## Functions used
source("R/GeocodeLocater.R")
source("R/APIget.R")
source("R/APIgetLoop.R")
source("R/Sleep.R")
source("R/JsontoCsvWriter.R")
source("R/BasicMapMaker.R")
######################################################################################################
## BELOW YOU CAN CHANGE SEARCH SETTINGS #
######################################################################################################
## Specify the city in folowing format: city, municipatily abreviation (e.g."Ede, GL")
city <- "Renkum, GL"
## Specify searctype (choose one from: cafe, conveiniece_store, food, grocery_or_supermarket,
## liquor_store, meal_delivery, meal_takeaway, restaurant, store)
searchtype <- "restaurant"
## Specify the radius (in meters)
rad <- 1000
## Add your API key
KEY <- "AIzaSyAcdv2napQhKQoP8pY9nebMkFJTZyeddDs"
## Specify map title
MapTitle <- "Renkum store 1km from Centre"
## Specify zoom level of the map, ranges from 0 (whole world) to 21 (building)
zoom = 14
csvlocation <- "Data/placesAPIWedJan28"
################################################################################################
################################################################################################
## Get longitude and latitute of the centre of the city
CityGeocode <- gGeoCode(city)
LatCity <- CityGeocode[1]
LonCity <- CityGeocode[2]
##Get JSON files with results of the search and save them in the created folder
get.places.API.Loop(lat = LatCity, lon = LonCity, radius = rad, searchtypes = searchtype,
filetype = "json", key = KEY)
## Write results into .csv in folder specified as argument
filename <- JsonToCsvWriter(filelocation =  csvlocation,categoryidentifier =  searchtype,locationidentifier =  city)
## Read created .csv
API = (read.csv(filename, header = TRUE))
head(API)
## Check column names
names(API)
## Plot results
outputlocation <- basicmapmaker(location = city,csvfile = filename,
zoom = zoom ,maptype = 'toner',MapTitle = MapTitle) # automate naming!
image <- readJPEG(outputlocation)
# Specify the city in folowing format: city, municipatily abreviation (e.g."Ede, GL")
city <- "Renkum, GL"
## Specify searctype (choose one from: cafe, conveiniece_store, food, grocery_or_supermarket,
## liquor_store, meal_delivery, meal_takeaway, restaurant, store)
searchtype <- "cafe"
## Specify the radius (in meters)
rad <- 1000
## Add your API key
KEY <- "AIzaSyAcdv2napQhKQoP8pY9nebMkFJTZyeddDs"
## Specify map title
MapTitle <- "Renkum store 1km from Centre"
## Specify zoom level of the map, ranges from 0 (whole world) to 21 (building)
zoom = 14
csvlocation <- "Data/placesAPIWedJan28"
################################################################################################
################################################################################################
## Get longitude and latitute of the centre of the city
CityGeocode <- gGeoCode(city)
LatCity <- CityGeocode[1]
LonCity <- CityGeocode[2]
##Get JSON files with results of the search and save them in the created folder
get.places.API.Loop(lat = LatCity, lon = LonCity, radius = rad, searchtypes = searchtype,
filetype = "json", key = KEY)
## Write results into .csv in folder specified as argument
filename <- JsonToCsvWriter(filelocation =  csvlocation,categoryidentifier =  searchtype,locationidentifier =  city)
## Read created .csv
API = (read.csv(filename, header = TRUE))
head(API)
## Check column names
names(API)
## Plot results
outputlocation <- basicmapmaker(location = city,csvfile = filename,
zoom = zoom ,maptype = 'toner',MapTitle = MapTitle) # automate naming!
image <- readJPEG(outputlocation)
## Specify the city in folowing format: city, municipatily abreviation (e.g."Ede, GL")
city <- "Renkum, GL"
## Specify searctype (choose one from: cafe, conveiniece_store, food, grocery_or_supermarket,
## liquor_store, meal_delivery, meal_takeaway, restaurant, store)
searchtype <- "cafe"
## Specify the radius (in meters)
rad <- 1000
## Add your API key
KEY <- "AIzaSyAcdv2napQhKQoP8pY9nebMkFJTZyeddDs"
## Specify map title
MapTitle <- "Renkum cafe 1km from Centre"
## Specify zoom level of the map, ranges from 0 (whole world) to 21 (building)
zoom = 14
csvlocation <- "Data/placesAPIWedJan28"
################################################################################################
################################################################################################
## Get longitude and latitute of the centre of the city
CityGeocode <- gGeoCode(city)
LatCity <- CityGeocode[1]
LonCity <- CityGeocode[2]
##Get JSON files with results of the search and save them in the created folder
get.places.API.Loop(lat = LatCity, lon = LonCity, radius = rad, searchtypes = searchtype,
filetype = "json", key = KEY)
## Write results into .csv in folder specified as argument
filename <- JsonToCsvWriter(filelocation =  csvlocation,categoryidentifier =  searchtype,locationidentifier =  city)
## Read created .csv
API = (read.csv(filename, header = TRUE))
head(API)
## Check column names
names(API)
## Plot results
outputlocation <- basicmapmaker(location = city,csvfile = filename,
zoom = zoom ,maptype = 'toner',MapTitle = MapTitle) # automate naming!
image <- readJPEG(outputlocation)
######################################################################################################
## BELOW YOU CAN CHANGE SEARCH SETTINGS #
######################################################################################################
## Specify the city in folowing format: city, municipatily abreviation (e.g."Ede, GL")
city <- "Renkum, GL"
## Specify searctype (choose one from: cafe, conveiniece_store, food, grocery_or_supermarket,
## liquor_store, meal_delivery, meal_takeaway, restaurant, store)
searchtype <- "grocery_or_supermarket"
## Specify the radius (in meters)
rad <- 1000
## Add your API key
KEY <- "AIzaSyAcdv2napQhKQoP8pY9nebMkFJTZyeddDs"
## Specify map title
MapTitle <- "Renkum grocery and supermarket 1km from Centre"
## Specify zoom level of the map, ranges from 0 (whole world) to 21 (building)
zoom = 14
csvlocation <- "Data/placesAPIWedJan28"
################################################################################################
################################################################################################
## Get longitude and latitute of the centre of the city
CityGeocode <- gGeoCode(city)
LatCity <- CityGeocode[1]
LonCity <- CityGeocode[2]
##Get JSON files with results of the search and save them in the created folder
get.places.API.Loop(lat = LatCity, lon = LonCity, radius = rad, searchtypes = searchtype,
filetype = "json", key = KEY)
## Write results into .csv in folder specified as argument
filename <- JsonToCsvWriter(filelocation =  csvlocation,categoryidentifier =  searchtype,locationidentifier =  city)
## Read created .csv
API = (read.csv(filename, header = TRUE))
head(API)
## Check column names
names(API)
## Plot results
outputlocation <- basicmapmaker(location = city,csvfile = filename,
zoom = zoom ,maptype = 'toner',MapTitle = MapTitle) # automate naming!
image <- readJPEG(outputlocation)
library(mapproj)
library(jpeg)
## Functions used
source("R/GeocodeLocater.R")
source("R/APIget.R")
source("R/APIgetLoop.R")
source("R/Sleep.R")
source("R/JsontoCsvWriter.R")
source("R/BasicMapMaker.R")
######################################################################################################
## BELOW YOU CAN CHANGE SEARCH SETTINGS #
######################################################################################################
## Specify the city in folowing format: city, municipatily abreviation (e.g."Ede, GL")
city <- "Renkum, GL"
## Specify searctype (choose one from: cafe, conveiniece_store, food, grocery_or_supermarket,
## liquor_store, meal_delivery, meal_takeaway, restaurant, store)
searchtype <- "grocery_or_supermarket"
## Specify the radius (in meters)
rad <- 1000
## Add your API key
KEY <- "AIzaSyAcdv2napQhKQoP8pY9nebMkFJTZyeddDs"
## Specify map title
MapTitle <- "Renkum grocery and supermarket 1km from Centre"
## Specify zoom level of the map, ranges from 0 (whole world) to 21 (building)
zoom = 14
csvlocation <- "Data/placesAPIWedJan28"
################################################################################################
################################################################################################
## Get longitude and latitute of the centre of the city
CityGeocode <- gGeoCode(city)
LatCity <- CityGeocode[1]
LonCity <- CityGeocode[2]
##Get JSON files with results of the search and save them in the created folder
get.places.API.Loop(lat = LatCity, lon = LonCity, radius = rad, searchtypes = searchtype,
filetype = "json", key = KEY)
## Write results into .csv in folder specified as argument
filename <- JsonToCsvWriter(filelocation =  csvlocation,categoryidentifier =  searchtype,locationidentifier =  city)
## Read created .csv
API = (read.csv(filename, header = TRUE))
head(API)
## Check column names
names(API)
## Plot results
outputlocation <- basicmapmaker(location = city,csvfile = filename,
zoom = zoom ,maptype = 'toner',MapTitle = MapTitle) # automate naming!
image <- readJPEG(outputlocation)
## Specify the city in folowing format: city, municipatily abreviation (e.g."Ede, GL")
city <- "Renkum, GL"
## Specify searctype (choose one from: cafe, conveiniece_store, food, grocery_or_supermarket,
## liquor_store, meal_delivery, meal_takeaway, restaurant, store)
searchtype <- "grocery_or_supermarket"
## Specify the radius (in meters)
rad <- 1000
## Add your API key
KEY <- "AIzaSyAcdv2napQhKQoP8pY9nebMkFJTZyeddDs"
## Specify map title
MapTitle <- "Renkum grocery and supermarket 1km from Centre"
## Specify zoom level of the map, ranges from 0 (whole world) to 21 (building)
zoom = 14
csvlocation <- "Data/placesAPIWedJan28"
################################################################################################
################################################################################################
## Get longitude and latitute of the centre of the city
CityGeocode <- gGeoCode(city)
LatCity <- CityGeocode[1]
LonCity <- CityGeocode[2]
##Get JSON files with results of the search and save them in the created folder
get.places.API.Loop(lat = LatCity, lon = LonCity, radius = rad, searchtypes = searchtype,
filetype = "json", key = KEY)
## Write results into .csv in folder specified as argument
filename <- JsonToCsvWriter(filelocation =  csvlocation,categoryidentifier =  searchtype,locationidentifier =  city)
## Read created .csv
API = (read.csv(filename, header = TRUE))
head(API)
## Check column names
names(API)
## Plot results
outputlocation <- basicmapmaker(location = city,csvfile = filename,
zoom = zoom ,maptype = 'toner',MapTitle = MapTitle) # automate naming!
image <- readJPEG(outputlocation)
outputfile <- paste("Output/",MapTitle,".tiff")
outputfile
outputfile <- gsub(" ", "", outputfile, fixed = TRUE)
outputfile
source("R/BasicMapMaker.R")
source("R/BasicMapMaker.R")
outputlocation <- basicmapmaker(location = city,csvfile = filename,
zoom = zoom ,maptype = 'toner',MapTitle = MapTitle) # automate naming!
image <- readJPEG(outputlocation)
source("R/BasicMapMaker.R")
outputlocation <- basicmapmaker(location = city,csvfile = filename,
zoom = zoom ,maptype = 'toner',MapTitle = MapTitle) # automate naming!
image <- readJPEG(outputlocation)
source("R/BasicMapMaker.R")
## Plot results
outputlocation <- basicmapmaker(location = city,csvfile = filename,
zoom = zoom ,maptype = 'toner',MapTitle = MapTitle) # automate naming!
image <- readJPEG(outputlocation)
source("R/BasicMapMaker.R")
outputlocation <- basicmapmaker(location = city,csvfile = filename,
zoom = zoom ,maptype = 'toner',MapTitle = MapTitle) # automate naming!
image <- readJPEG(outputlocation)
outputlocation <- basicmapmaker(location = city,csvfile = filename,
zoom = zoom ,maptype = 'toner',MapTitle = MapTitle) # automate naming!
image <- readJPEG(outputlocation)
source("R/BasicMapMaker.R")
outputlocation <- basicmapmaker(location = city,csvfile = filename,
zoom = zoom ,maptype = 'toner',MapTitle = MapTitle) # automate naming!
image <- readJPEG(outputlocation)
outputlocation <- basicmapmaker(location = city,csvfile = filename,
zoom = zoom ,maptype = 'terrain',MapTitle = MapTitle) # automate naming!
image <- readJPEG(outputlocation)
source("R/BasicMapMaker.R")
## Plot results
outputlocation <- basicmapmaker(location = city,csvfile = filename,
zoom = zoom ,maptype = 'terrain',MapTitle = MapTitle) # automate naming!
image <- readJPEG(outputlocation)
outputlocation <- basicmapmaker(location = city,csvfile = filename,
zoom = zoom ,maptype = 'terrain',MapTitle = MapTitle) # automate naming!
image <- readJPEG(outputlocation)
source("R/BasicMapMaker.R")
outputlocation <- basicmapmaker(location = city,csvfile = filename,
zoom = zoom ,maptype = 'terrain',MapTitle = MapTitle) # automate naming!
image <- readJPEG(outputlocation)
source("R/BasicMapMaker.R")
######################################################################################################
## BELOW YOU CAN CHANGE SEARCH SETTINGS #
######################################################################################################
## Specify the city in folowing format: city, municipatily abreviation (e.g."Ede, GL")
city <- "Ede, GL"
## Specify searctype (choose one from: cafe, conveiniece_store, food, grocery_or_supermarket,
## liquor_store, meal_delivery, meal_takeaway, restaurant, store)
searchtype <- "grocery_or_supermarket"
## Specify the radius (in meters)
rad <- 1000
## Add your API key
KEY <- "AIzaSyAcdv2napQhKQoP8pY9nebMkFJTZyeddDs"
## Specify map title
MapTitle <- "Ede grocery and supermarket 1km from Centre"
## Specify zoom level of the map, ranges from 0 (whole world) to 21 (building)
zoom = 14
csvlocation <- "Data/placesAPIWedJan28"
################################################################################################
################################################################################################
## Get longitude and latitute of the centre of the city
CityGeocode <- gGeoCode(city)
LatCity <- CityGeocode[1]
LonCity <- CityGeocode[2]
##Get JSON files with results of the search and save them in the created folder
get.places.API.Loop(lat = LatCity, lon = LonCity, radius = rad, searchtypes = searchtype,
filetype = "json", key = KEY)
## Write results into .csv in folder specified as argument
filename <- JsonToCsvWriter(filelocation =  csvlocation,categoryidentifier =  searchtype,locationidentifier =  city)
## Read created .csv
API = (read.csv(filename, header = TRUE))
head(API)
## Check column names
names(API)
## Plot results
outputlocation <- basicmapmaker(location = city,csvfile = filename,
zoom = zoom ,maptype = 'terrain',MapTitle = MapTitle) # automate naming!
image <- readJPEG(outputlocation)
source("R/BasicMapMaker.R")
## Plot results
outputlocation <- basicmapmaker(location = city,csvfile = filename,
zoom = zoom ,maptype = 'terrain',MapTitle = MapTitle) # automate naming!
outputlocation <- basicmapmaker(location = city,csvfile = filename,
zoom = zoom ,maptype = 'toner',MapTitle = MapTitle) # automate naming!
source("R/BasicMapMaker.R")
outputlocation <- basicmapmaker(location = city,csvfile = filename,
zoom = zoom ,maptype = 'toner',MapTitle = MapTitle) # automate naming!
source("R/BasicMapMaker.R")
outputlocation <- basicmapmaker(location = city,csvfile = filename,
zoom = zoom ,maptype = 'toner',MapTitle = MapTitle) # automate naming!
source("R/BasicMapMaker.R")
outputlocation <- basicmapmaker(location = city,csvfile = filename,
zoom = zoom ,maptype = 'toner',MapTitle = MapTitle) # automate naming!
