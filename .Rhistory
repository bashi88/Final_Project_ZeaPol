}
croppedmap <- as.raster(croppedmap)
class(croppedmap) <- c("ggmap", "raster")
attr(croppedmap, "bb") <- data.frame(ll.lat = bbox["bottom"],
ll.lon = bbox["left"], ur.lat = bbox["top"], ur.lon = bbox["right"])
croppedmap
}
assignInNamespace("get_stamenmap",get_stamenmap,ns="ggmap")
## Plot results into .pdf file (Output folder)
outputlocation <- basicmapmaker(location = city,csvfile = filename,
zoom = zoom ,maptype = 'watercolor',MapTitle = MapTitle)
library(jpeg)
install.packages("jpeg")
library(jpeg)
## Plot results into .pdf file (Output folder)
outputlocation <- basicmapmaker(location = city,csvfile = filename,
zoom = zoom ,maptype = 'watercolor',MapTitle = MapTitle)
## Load libraries
library(RCurl)
library(RJSONIO)
library(plyr)
library(ggplot2)
library(ggmap)
library(maps)
library(sp)
library(rgdal)
library(RgoogleMaps)
library(mapproj)
library(jpeg)
## Functions used
source("R/GeocodeLocater.R")
source("R/APIget.R")
source("R/APIgetLoop.R")
source("R/Sleep.R")
source("R/JsontoCsvWriter.R")
source("R/BasicMapMaker.R")
######################################################################################################
## BELOW YOU CAN CHANGE SEARCH SETTINGS #
######################################################################################################
## Specify the city in folowing format: city, municipatily abreviation (e.g."Ede, GL")
city <- "Arnhem, GL"
## Specify searctype (choose one from: cafe, conveiniece_store, food, grocery_or_supermarket,
## liquor_store, meal_delivery, meal_takeaway, restaurant, store)
searchtype <- "grocery_or_supermarket"
## Specify the radius (in meters)
rad <- 3000
## Add your API key
KEY <- "AIzaSyAcdv2napQhKQoP8pY9nebMkFJTZyeddDs"
## Specify map title
MapTitle <- "Arnhem grocery and supermarket 3km from Centre"
## Specify zoom level of the map, ranges from 0 (whole world) to 21 (building)
## 14 for 1000m-3000m radius, 13 or smaller for radius > 3000
zoom = 13
csvlocation <- "Data/placesAPIWedJan28"
################################################################################################
################################################################################################
## Get longitude and latitute of the centre of the city
CityGeocode <- gGeoCode(city)
LatCity <- CityGeocode[1]
LonCity <- CityGeocode[2]
##Get JSON files with results of the search and save them in the created folder
get.places.API.Loop(lat = LatCity, lon = LonCity, radius = rad, searchtypes = searchtype,
filetype = "json", key = KEY)
## Write results into .csv in folder specified as argument
filename <- JsonToCsvWriter(filelocation =  csvlocation,categoryidentifier =  searchtype,locationidentifier =  city)
## Read created .csv
API = (read.csv(filename, header = TRUE))
head(API)
## Check column names
names(API)
## Plot results into .pdf file (Output folder)
outputlocation <- basicmapmaker(location = city,csvfile = filename,
zoom = zoom ,maptype = 'terrain',MapTitle = MapTitle)
source("R/GeocodeLocater.R")
source("R/APIget.R")
source("R/APIgetLoop.R")
source("R/Sleep.R")
source("R/JsontoCsvWriter.R")
source("R/BasicMapMaker.R")
## Specify the city in folowing format: city, municipatily abreviation (e.g."Ede, GL")
city <- "Arnhem, GL"
## Specify searctype (choose one from: cafe, conveiniece_store, food, grocery_or_supermarket,
## liquor_store, meal_delivery, meal_takeaway, restaurant, store)
searchtype <- "grocery_or_supermarket"
## Specify the radius (in meters)
rad <- 3000
## Add your API key
KEY <- "AIzaSyAcdv2napQhKQoP8pY9nebMkFJTZyeddDs"
## Specify map title
MapTitle <- "Arnhem grocery and supermarket 3km from Centre"
## Specify zoom level of the map, ranges from 0 (whole world) to 21 (building)
## 14 for 1000m-3000m radius, 13 or smaller for radius > 3000
zoom = 13
csvlocation <- "Data/placesAPIWedJan28"
################################################################################################
################################################################################################
## Get longitude and latitute of the centre of the city
CityGeocode <- gGeoCode(city)
LatCity <- CityGeocode[1]
LonCity <- CityGeocode[2]
##Get JSON files with results of the search and save them in the created folder
get.places.API.Loop(lat = LatCity, lon = LonCity, radius = rad, searchtypes = searchtype,
filetype = "json", key = KEY)
## Write results into .csv in folder specified as argument
filename <- JsonToCsvWriter(filelocation =  csvlocation,categoryidentifier =  searchtype,locationidentifier =  city)
## Read created .csv
API = (read.csv(filename, header = TRUE))
head(API)
## Check column names
names(API)
## Plot results into .pdf file (Output folder)
outputlocation <- basicmapmaker(location = city,csvfile = filename,
zoom = zoom ,maptype = 'hybrid',MapTitle = MapTitle)
source("R/BasicMapMaker.R")
## Specify the city in folowing format: city, municipatily abreviation (e.g."Ede, GL")
city <- "Arnhem, GL"
## Specify searctype (choose one from: cafe, conveiniece_store, food, grocery_or_supermarket,
## liquor_store, meal_delivery, meal_takeaway, restaurant, store)
searchtype <- "grocery_or_supermarket"
## Specify the radius (in meters)
rad <- 3000
## Add your API key
KEY <- "AIzaSyAcdv2napQhKQoP8pY9nebMkFJTZyeddDs"
## Specify map title
MapTitle <- "Arnhem grocery and supermarket 3km from Centre"
## Specify zoom level of the map, ranges from 0 (whole world) to 21 (building)
## 14 for 1000m-3000m radius, 13 or smaller for radius > 3000
zoom = 13
csvlocation <- "Data/placesAPIWedJan28"
################################################################################################
################################################################################################
## Get longitude and latitute of the centre of the city
CityGeocode <- gGeoCode(city)
LatCity <- CityGeocode[1]
LonCity <- CityGeocode[2]
##Get JSON files with results of the search and save them in the created folder
get.places.API.Loop(lat = LatCity, lon = LonCity, radius = rad, searchtypes = searchtype,
filetype = "json", key = KEY)
## Write results into .csv in folder specified as argument
filename <- JsonToCsvWriter(filelocation =  csvlocation,categoryidentifier =  searchtype,locationidentifier =  city)
## Read created .csv
API = (read.csv(filename, header = TRUE))
head(API)
## Check column names
names(API)
## Plot results into .pdf file (Output folder)
outputlocation <- basicmapmaker(location = city,csvfile = filename,
zoom = zoom ,maptype = 'hybrid',MapTitle = MapTitle)
source("R/BasicMapMaker.R")
######################################################################################################
## BELOW YOU CAN CHANGE SEARCH SETTINGS #
######################################################################################################
## Specify the city in folowing format: city, municipatily abreviation (e.g."Ede, GL")
city <- "Renkum, GL"
## Specify searctype (choose one from: cafe, conveiniece_store, food, grocery_or_supermarket,
## liquor_store, meal_delivery, meal_takeaway, restaurant, store)
searchtype <- "grocery_or_supermarket"
## Specify the radius (in meters)
rad <- 1000
## Add your API key
KEY <- "AIzaSyAcdv2napQhKQoP8pY9nebMkFJTZyeddDs"
## Specify map title
MapTitle <- "Renkum grocery and supermarket 1km from Centre"
## Specify zoom level of the map, ranges from 0 (whole world) to 21 (building)
## 14 for 1000m-3000m radius, 13 or smaller for radius > 3000
zoom = 14
csvlocation <- "Data/placesAPIWedJan28"
################################################################################################
################################################################################################
## Get longitude and latitute of the centre of the city
CityGeocode <- gGeoCode(city)
LatCity <- CityGeocode[1]
LonCity <- CityGeocode[2]
##Get JSON files with results of the search and save them in the created folder
get.places.API.Loop(lat = LatCity, lon = LonCity, radius = rad, searchtypes = searchtype,
filetype = "json", key = KEY)
## Write results into .csv in folder specified as argument
filename <- JsonToCsvWriter(filelocation =  csvlocation,categoryidentifier =  searchtype,locationidentifier =  city)
## Read created .csv
API = (read.csv(filename, header = TRUE))
head(API)
## Check column names
names(API)
## Plot results into .pdf file (Output folder)
outputlocation <- basicmapmaker(location = city,csvfile = filename,
zoom = zoom ,maptype = 'terrain',MapTitle = MapTitle)
## Functions used
source("R/GeocodeLocater.R")
source("R/APIget.R")
source("R/APIgetLoop.R")
source("R/Sleep.R")
source("R/JsontoCsvWriter.R")
source("R/BasicMapMaker.R")
######################################################################################################
## BELOW YOU CAN CHANGE SEARCH SETTINGS #
######################################################################################################
## Specify the city in folowing format: city, municipatily abreviation (e.g."Ede, GL")
city <- "Renkum, GL"
## Specify searctype (choose one from: cafe, conveiniece_store, food, grocery_or_supermarket,
## liquor_store, meal_delivery, meal_takeaway, restaurant, store)
searchtype <- "grocery_or_supermarket"
## Specify the radius (in meters)
rad <- 1000
## Add your API key
KEY <- "AIzaSyAcdv2napQhKQoP8pY9nebMkFJTZyeddDs"
## Specify map title
MapTitle <- "Renkum grocery and supermarket 1km from Centre"
## Specify zoom level of the map, ranges from 0 (whole world) to 21 (building)
## 14 for 1000m-3000m radius, 13 or smaller for radius > 3000
zoom = 14
csvlocation <- "Data/placesAPIWedJan28"
################################################################################################
################################################################################################
## Get longitude and latitute of the centre of the city
CityGeocode <- gGeoCode(city)
LatCity <- CityGeocode[1]
LonCity <- CityGeocode[2]
##Get JSON files with results of the search and save them in the created folder
get.places.API.Loop(lat = LatCity, lon = LonCity, radius = rad, searchtypes = searchtype,
filetype = "json", key = KEY)
## Write results into .csv in folder specified as argument
filename <- JsonToCsvWriter(filelocation =  csvlocation,categoryidentifier =  searchtype,locationidentifier =  city)
## Read created .csv
API = (read.csv(filename, header = TRUE))
head(API)
## Check column names
names(API)
## Plot results into .pdf file (Output folder)
outputlocation <- basicmapmaker(location = city,csvfile = filename,
zoom = zoom ,maptype = 'toner',MapTitle = MapTitle)
get_stamenmap <- function (bbox =  c(left = -95.80204, bottom = 29.38048, right = -94.92313,
top = 30.14344), zoom = 10, maptype = c("terrain", "watercolor",
"toner"), crop = TRUE, messaging = FALSE, urlonly = FALSE,
filename = "ggmapTemp", color = c("color", "bw"), ...)
{
args <- as.list(match.call(expand.dots = TRUE)[-1])
argsgiven <- names(args)
if ("bbox" %in% argsgiven) {
if (!(is.numeric(bbox) && length(bbox) == 4)) {
stop("bounding box improperly specified.  see ?get_openstreetmap",
call. = F)
}
}
if ("zoom" %in% argsgiven) {
if (!(is.numeric(zoom) && length(zoom) == 1 && zoom ==
round(zoom) && zoom >= 0 && zoom <= 18)) {
stop("scale must be a postive integer 0-18, see ?get_stamenmap.",
call. = F)
}
}
if ("messaging" %in% argsgiven)
stopifnot(is.logical(messaging))
if ("urlonly" %in% argsgiven)
stopifnot(is.logical(urlonly))
if ("filename" %in% argsgiven) {
filename_stop <- TRUE
if (is.character(filename) && length(filename) == 1)
filename_stop <- FALSE
if (filename_stop)
stop("improper filename specification, see ?get_stamenmap.",
call. = F)
}
if ("checkargs" %in% argsgiven) {
.Deprecated(msg = "checkargs argument deprecated, args are always checked after v2.1.")
}
maptype <- match.arg(maptype)
color <- match.arg(color)
if (is.null(names(bbox)))
names(bbox) <- c("left", "bottom", "right", "top")
fourCorners <- expand.grid(lon = c(bbox["left"], bbox["right"]),
lat = c(bbox["bottom"], bbox["top"]))
fourCorners$zoom <- zoom
row.names(fourCorners) <- c("lowerleft", "lowerright", "upperleft",
"upperright")
fourCornersTiles <- apply(fourCorners, 1, function(v) LonLat2XY(v[1],
v[2], v[3]))
xsNeeded <- Reduce(":", sort(unique(as.numeric(sapply(fourCornersTiles,
function(df) df$X)))))
numXTiles <- length(xsNeeded)
ysNeeded <- Reduce(":", sort(unique(as.numeric(sapply(fourCornersTiles,
function(df) df$Y)))))
numYTiles <- length(ysNeeded)
tilesNeeded <- expand.grid(x = xsNeeded, y = ysNeeded)
if (nrow(tilesNeeded) > 40) {
message(paste0(nrow(tilesNeeded), " tiles needed, this may take a while ",
"(try a smaller zoom)."))
}
xTileProgression <- rep(1:numXTiles, numYTiles)
yTileProgression <- rep(1:numYTiles, each = numXTiles)
base_url <- "http://tile.stamen.com/"
base_url <- paste(base_url, maptype, "/", zoom, sep = "")
urls <- paste(base_url, apply(tilesNeeded, 1, paste, collapse = "/"),
sep = "/")
urls <- paste(urls, ".png", sep = "")
if (messaging)
message(length(urls), " tiles required.")
if (urlonly)
return(urls)
size <- 256 * c(length(xsNeeded), length(ysNeeded))
map <- matrix("NA", nrow = size[2], ncol = size[1])
destfile <- paste(filename, "png", sep = ".")
for (k in seq_along(urls)) {
download.file(urls[[k]], destfile = destfile, quiet = !messaging,
mode = "wb")
tile <- readPNG(destfile)
if (color == "color") {
tile <- apply(tile, 2, rgb)
}
else if (color == "bw") {
tile_dim <- dim(tile)
tile <- gray(0.3 * tile[, , 1] + 0.59 * tile[, ,
2] + 0.11 * tile[, , 3])
dim(tile) <- tile_dim[1:2]
}
map[(1 + 256 * (yTileProgression[k] - 1)):(256 * yTileProgression[k]),
(1 + 256 * (xTileProgression[k] - 1)):(256 * xTileProgression[k])] <- tile
}
bboxOfTile <- function(vXY) {
lonlat_upperleft <- XY2LonLat(vXY[1], vXY[2], zoom)
lonlat_lowerright <- XY2LonLat(vXY[1] + 1, vXY[2] + 1,
zoom)
data.frame(left = lonlat_upperleft$lon, bottom = lonlat_lowerright$lat,
right = lonlat_lowerright$lon, top = lonlat_upperleft$lat)
}
tileBboxes <- ldply(split(tilesNeeded, 1:nrow(tilesNeeded)),
function(df) bboxOfTile(as.numeric(df)))
mbbox <- c(left = min(tileBboxes$left), bottom = min(tileBboxes$bottom),
right = max(tileBboxes$right), top = max(tileBboxes$top))
if (!crop) {
map <- as.raster(map)
class(map) <- c("ggmap", "raster")
attr(map, "bb") <- data.frame(ll.lat = mbbox["bottom"],
ll.lon = mbbox["left"], ur.lat = mbbox["top"], ur.lon = mbbox["right"])
return(map)
}
if (crop) {
slon <- seq(mbbox["left"], mbbox["right"], length.out = size[1])
slat <- seq(mbbox["top"], mbbox["bottom"], length.out = size[2])
keep_x_ndcs <- which(bbox["left"] <= slon & slon <= bbox["right"])
keep_y_ndcs <- which(bbox["bottom"] <= slat & slat <=
bbox["top"])
croppedmap <- map[keep_y_ndcs, keep_x_ndcs]
}
croppedmap <- as.raster(croppedmap)
class(croppedmap) <- c("ggmap", "raster")
attr(croppedmap, "bb") <- data.frame(ll.lat = bbox["bottom"],
ll.lon = bbox["left"], ur.lat = bbox["top"], ur.lon = bbox["right"])
croppedmap
}
assignInNamespace("get_stamenmap",get_stamenmap,ns="ggmap")
## Plot results into .pdf file (Output folder)
outputlocation <- basicmapmaker(location = city,csvfile = filename,
zoom = zoom ,maptype = 'toner',MapTitle = MapTitle)
source("R/BasicMapMaker.R")
## Plot results into .pdf file (Output folder)
outputlocation <- basicmapmaker(location = city,csvfile = filename,
zoom = zoom ,maptype = 'toner',MapTitle = MapTitle)
## Load libraries
library(RCurl)
library(RJSONIO)
library(plyr)
library(ggplot2)
library(ggmap)
library(maps)
library(sp)
library(rgdal)
library(RgoogleMaps)
library(mapproj)
library(jpeg)
## Functions used
source("R/GeocodeLocater.R")
source("R/APIget.R")
source("R/APIgetLoop.R")
source("R/Sleep.R")
source("R/JsontoCsvWriter.R")
source("R/BasicMapMaker.R")
######################################################################################################
## BELOW YOU CAN CHANGE SEARCH SETTINGS #
######################################################################################################
## Specify the city in folowing format: city, municipatily abreviation (e.g."Ede, GL")
city <- "Renkum, GL"
## Specify searctype (choose one from: cafe, conveiniece_store, food, grocery_or_supermarket,
## liquor_store, meal_delivery, meal_takeaway, restaurant, store)
searchtype <- "grocery_or_supermarket"
## Specify the radius (in meters)
rad <- 1000
## Add your API key
KEY <- "AIzaSyAcdv2napQhKQoP8pY9nebMkFJTZyeddDs"
## Specify map title
MapTitle <- "Renkum grocery and supermarket 1km from Centre"
## Specify zoom level of the map, ranges from 0 (whole world) to 21 (building)
## 14 for 1000m-3000m radius, 13 or smaller for radius > 3000
zoom = 14
csvlocation <- "Data/placesAPIWedJan28"
################################################################################################
################################################################################################
## Get longitude and latitute of the centre of the city
CityGeocode <- gGeoCode(city)
LatCity <- CityGeocode[1]
LonCity <- CityGeocode[2]
##Get JSON files with results of the search and save them in the created folder
get.places.API.Loop(lat = LatCity, lon = LonCity, radius = rad, searchtypes = searchtype,
filetype = "json", key = KEY)
## Write results into .csv in folder specified as argument
filename <- JsonToCsvWriter(filelocation =  csvlocation,categoryidentifier =  searchtype,locationidentifier =  city)
## Read created .csv
API = (read.csv(filename, header = TRUE))
head(API)
## Check column names
names(API)
## Plot results into .pdf file (Output folder)
outputlocation <- basicmapmaker(location = city,csvfile = filename,
zoom = zoom ,maptype = 'toner',MapTitle = MapTitle)
# Team: ZeaPol
# Team Members: Roeland de Koning / Barbara Sienkiewicz
# Date: 29/01/2015
# Final_Project
basicmapmaker <- function(location, csvfile, zoom, maptype, MapTitle) {
API = read.csv(csvfile, header = TRUE)
pg <- get_map(location = location,
zoom = zoom,
source = 'stamen', # try 'google' or 'osm'
maptype = maptype,
color = 'color')
print("BaseMap Retrieved")
# the ggmap() function will convert your map data into a ggplot object
# the agruments to include your data at this stage are not essential, but
# can make it easier to add layers (such as 'geoms') later on
PG <- ggmap(pg, extent = 'panel',
base_layer = ggplot(API, aes(x=lon, y=lat))
)
PG <- PG + geom_point(color = "red", size = 2)
print("Vector Points Placed")
PG <- PG + labs(title = MapTitle, x = "Longitude",
y = "Latitude")
dir.create("Output")
outputfile <- paste("Output/",MapTitle,".pdf")
outputfile <- gsub(" ", "", outputfile, fixed = TRUE)
print(paste("exdir = ", outputfile))
pdf(outputfile)
print(PG)
dev.off()
return(outputfile)
## Create buffer zones of interest range indeterminate
## calculate intersection of the points / individuals of interest with the created buffer
#intersect(x = ,y = )
}
## Team: ZeaPol
## Team Members: Roeland de Koning / Barbara Sienkiewicz
## Date: 29/01/2015
## Final_Project
#######################################################################################################
## Check working directory
getwd()
## If necessary, change directory by:
##setwd()
## Load libraries
library(RCurl)
library(RJSONIO)
library(plyr)
library(ggplot2)
library(ggmap)
library(maps)
library(sp)
library(rgdal)
library(RgoogleMaps)
library(mapproj)
library(jpeg)
## Functions used
source("R/GeocodeLocater.R")
source("R/APIget.R")
source("R/APIgetLoop.R")
source("R/Sleep.R")
source("R/JsontoCsvWriter.R")
source("R/BasicMapMaker.R")
######################################################################################################
## BELOW YOU CAN CHANGE SEARCH SETTINGS #
######################################################################################################
## Specify the city in folowing format: city, municipatily abreviation (e.g."Ede, GL")
city <- "Renkum, GL"
## Specify searctype (choose one from: cafe, conveiniece_store, food, grocery_or_supermarket,
## liquor_store, meal_delivery, meal_takeaway, restaurant, store)
searchtype <- "grocery_or_supermarket"
## Specify the radius (in meters)
rad <- 1000
## Add your API key
KEY <- "AIzaSyAcdv2napQhKQoP8pY9nebMkFJTZyeddDs"
## Specify map title
MapTitle <- "Renkum grocery and supermarket 1km from Centre"
## Specify zoom level of the map, ranges from 0 (whole world) to 21 (building)
## 14 for 1000m-3000m radius, 13 or smaller for radius > 3000
zoom = 14
csvlocation <- "Data/placesAPIWedJan28"
################################################################################################
################################################################################################
## Get longitude and latitute of the centre of the city
CityGeocode <- gGeoCode(city)
LatCity <- CityGeocode[1]
LonCity <- CityGeocode[2]
##Get JSON files with results of the search and save them in the created folder
get.places.API.Loop(lat = LatCity, lon = LonCity, radius = rad, searchtypes = searchtype,
filetype = "json", key = KEY)
## Write results into .csv in folder specified as argument
filename <- JsonToCsvWriter(filelocation =  csvlocation,categoryidentifier =  searchtype,locationidentifier =  city)
## Read created .csv
API = (read.csv(filename, header = TRUE))
head(API)
## Check column names
names(API)
## Plot results into .pdf file (Output folder)
outputlocation <- basicmapmaker(location = city,csvfile = filename,
zoom = zoom ,maptype = 'toner',MapTitle = MapTitle)
