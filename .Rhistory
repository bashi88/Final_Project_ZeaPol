gGeoCode("Wageningen, GL")
library(RCurl)
install.packages(c("RCurl", "RJSONIO"))
library(RCurl)
library(RJSONIO)
Source(GeocodeLocater)
source(GeocodeLocater)
source("R/GeocodeLocater.R")
gGeoCode("Wageningen, GL")
gGeoCode("Ede, GL")
wageningengeocode <- gGeoCode("Wageningen, GL")
edegeocode <- gGeoCode("Ede, GL")
wageningengeocode$lat
wageningengeocode
wageningengeocode@data
wageningengeocode$lat
wageningengeocode$x
wageningengeocode(1)
wageningengeocode[1]
wageningengeocode[2]
wageningengeocode <- gGeoCode("Wageningen")
wageningengeocode[1]
wageningengeocode <- gGeoCode()
source("R/GeocodeLocater.R")
construct.geocode.url <- function(address, return.call = "json", sensor = "false") {
root <- "http://maps.google.com/maps/api/geocode/"
uscript <- paste(root, return.call, "?address=", address, "&sensor=", sensor, sep = "")
return(URLencode(uscript))
}
gGeoCode <- function(address,verbose=FALSE) {
if address == NA
address <- "Wageningen"
if(verbose) cat(address,"\n")
u <- construct.geocode.url(address)
doc <- getURL(u)
x <- fromJSON(doc,simplify = FALSE)
if(x$status=="OK") {
lat <- x$results[[1]]$geometry$location$lat
lng <- x$results[[1]]$geometry$location$lng
return(c(lat, lng))
} else {
return(c(NA,NA))
}
}
construct.geocode.url <- function(address, return.call = "json", sensor = "false") {
root <- "http://maps.google.com/maps/api/geocode/"
uscript <- paste(root, return.call, "?address=", address, "&sensor=", sensor, sep = "")
return(URLencode(uscript))
}
gGeoCode <- function(address,verbose=FALSE) {
if address == NA {
address <- "Wageningen" }
if(verbose) cat(address,"\n")
u <- construct.geocode.url(address)
doc <- getURL(u)
x <- fromJSON(doc,simplify = FALSE)
if(x$status=="OK") {
lat <- x$results[[1]]$geometry$location$lat
lng <- x$results[[1]]$geometry$location$lng
return(c(lat, lng))
} else {
return(c(NA,NA))
}
}
construct.geocode.url <- function(address, return.call = "json", sensor = "false") {
root <- "http://maps.google.com/maps/api/geocode/"
uscript <- paste(root, return.call, "?address=", address, "&sensor=", sensor, sep = "")
return(URLencode(uscript))
}
gGeoCode <- function(address,verbose=FALSE) {
if (address == NA) {
address <- "Wageningen" }
if(verbose) cat(address,"\n")
u <- construct.geocode.url(address)
doc <- getURL(u)
x <- fromJSON(doc,simplify = FALSE)
if(x$status=="OK") {
lat <- x$results[[1]]$geometry$location$lat
lng <- x$results[[1]]$geometry$location$lng
return(c(lat, lng))
} else {
return(c(NA,NA))
}
}
source("R/GeocodeLocater.R")
source("R/GeocodeLocater.R")
wageningengeocode <- gGeoCode("Wageningen, GL")
wageningengeocode <- gGeoCode()
construct.geocode.url <- function(address, return.call = "json", sensor = "false") {
root <- "http://maps.google.com/maps/api/geocode/"
uscript <- paste(root, return.call, "?address=", address, "&sensor=", sensor, sep = "")
return(URLencode(uscript))
}
gGeoCode <- function(address = NULL,verbose=FALSE) {
if (is.null(address)) {
address <- "Wageningen" }
if(verbose) cat(address,"\n")
u <- construct.geocode.url(address)
doc <- getURL(u)
x <- fromJSON(doc,simplify = FALSE)
if(x$status=="OK") {
lat <- x$results[[1]]$geometry$location$lat
lng <- x$results[[1]]$geometry$location$lng
return(c(lat, lng))
} else {
return(c(NA,NA))
}
}
source("R/GeocodeLocater.R")
wageningengeocode <- gGeoCode("Wageningen, GL")
latwageningen <- wageningengeocode[1]
latwageningen
wageningengeocode <- gGeoCode()
wageningengeocode
a <- 22
a
str(a)
type(a)
food
"food"
# Team: ZeaPol
# Team Members: Roeland de Koning / Barbara Sienkiewicz
# Date: 26/01/2015
# Final_Project
get.places.API <- function(lat, lon, radius, searchtypes =NULL, searchnames = NULL, filetype, key) {
if(is.null(searchnames)) {
searchnames <- ""
}
if(is.null(searchtypes)) {
searchtypes <- ""
}
rootscript <- "https://maps.googleapis.com/maps/api/place/nearbysearch/"
geocodeandfilescript <- filetype + "?location=" + lat /, + lon +"$radius=" + radius
typesearchscript <- "&types=" + searchtypes
namesearchscript <- "&names=" + searchnames
keyscript <- "&key=" + key
url <- rootscript + geocodeandfilescript + typesearchscript +namesearchscript + keyscript
}
get.places.API <- function(lat, lon, radius, searchtypes =NULL, searchnames = NULL, filetype, key) {
if(is.null(searchnames)) {
searchnames <- ""
}
if(is.null(searchtypes)) {
searchtypes <- ""
}
rootscript <- "https://maps.googleapis.com/maps/api/place/nearbysearch/"
geocodeandfilescript <- filetype + "?location=" + lat \, + lon +"$radius=" + radius
typesearchscript <- "&types=" + searchtypes
namesearchscript <- "&names=" + searchnames
keyscript <- "&key=" + key
url <- rootscript + geocodeandfilescript + typesearchscript +namesearchscript + keyscript
}
get.places.API <- function(lat, lon, radius, searchtypes =NULL, searchnames = NULL, filetype, key) {
if(is.null(searchtypes)) {
searchtypes <- " "
}
if(is.null(searchnames)) {
searchnames <- " "
}
rootscript <- "https://maps.googleapis.com/maps/api/place/nearbysearch/"
geocodeandfilescript <- filetype + "?location=" + lat \, + lon +"$radius=" + radius
typesearchscript <- "&types=" + searchtypes
namesearchscript <- "&names=" + searchnames
keyscript <- "&key=" + key
url <- rootscript + geocodeandfilescript + typesearchscript +namesearchscript + keyscript
}
get.places.API <- function(lat, lon, radius, searchtypes =NULL, searchnames = NULL, filetype, key) {
if(is.null(searchtypes)) {
searchtypes <- ""
}
if(is.null(searchnames)) {
searchnames <- ""
}
rootscript <- "https://maps.googleapis.com/maps/api/place/nearbysearch/"
geocodeandfilescript <- paste(filetype,"?location=",lat,",",lon,"$radius=",radius)
typesearchscript <- paste("&types=",searchtypes)
namesearchscript <- paste("&names=",searchnames)
keyscript <- paste("&key=",key)
url <- paste(rootscript,geocodeandfilescript,typesearchscript,namesearchscript,keyscript)
}
library(RCurl)
library(RJSONIO)
source("R/GeocodeLocater.R")
source("R/APIget.R")
source("R/JsontoCsvWriter.R")
CityGeocode <- gGeoCode("Wageningen, GL")
LatCity <- CityGeocode[1]
LonCity <- CityGeocode[2]
APIDataFrame <- JsonToCsvWriter("Data/placesAPIrestaurantMonJan261407422015.json")
APIDataFrame <- JsonToCsvWriter("Data/placesAPIrestaurantMonJan261407422015.json")
APIDataFrame
write.csv(APIDataFrame, "Data/APIDataFrame.csv")
write.csv(APIDataFrame, "Data/APIDataFrame.csv", overwrite = T)
write.csv?
?write.csv
testcsv <- write.csv(APIDataFrame, "Data/APIDataFrame.csv")
testcsv
write.csv(APIDataFrame, "Data/APIDataFrame.csv")
testcsv <- open("Data/APIDataFrame.csv")
testcsv@data
testcsv= read.csv("Data/APIDataFrame.csv", header = TRUE)
# Team: ZeaPol
# Team Members: Roeland de Koning / Barbara Sienkiewicz
# Date: 26/01/2015
# Final_Project
JsonToCsvWriter <- function(file) {
raw_data <- fromJSON(file)
latlist <- list()
lonlist <- list()
namelist <- list()
typelist <- list()
addresslist <- list()
for(i in 1:length(raw_data$results)) {
latlist[i] <- raw_data$results[[i]]$geometry$location[1]
lonlist[i] <- raw_data$results[[i]]$geometry$location[2]
namelist[i] <- raw_data$results[[i]]$name
addresslist[i] <- raw_data$results[[i]]$vicinity
subtypelist <- list()
for(j in 1:length(raw_data$results[[i]]$types)) {
subtypelist[j] <- raw_data$results[[i]]$types[j]
}
typelist[i] <- list(subtypelist, sep=";")
}
datalist <- list(lat = latlist, lon = lonlist, name = namelist, type = typelist, address = addresslist)
#return(datalist)
new_dataframe <- do.call(rbind, datalist)
return(new_dataframe)
}
source("R/JsontoCsvWriter.R")
APIDataFrame <- JsonToCsvWriter("Data/placesAPIrestaurantMonJan261407422015.json")
APIDataFrame
write.csv(APIDataFrame, "Data/APIDataFrame.csv")
write.csv(APIDataFrame, "Data/APIDataFrame2.csv")
source("R/JsontoCsvWriter.R")
source("R/JsontoCsvWriter.R")
source("R/JsontoCsvWriter.R")
APIDataFrame <- JsonToCsvWriter("Data/placesAPIrestaurantMonJan261407422015.json")
source("R/JsontoCsvWriter.R")
APIDataFrame <- JsonToCsvWriter("Data/placesAPIrestaurantMonJan261407422015.json")
APIDataFrame
write.csv(APIDataFrame, "Data/APIDataFrame2.csv")
write.csv(APIDataFrame, "Data/APIDataFrame.csv")
APIDataFrame
APIDataFrame[1]
APIDataFrame[1][2]
APIDataFrame[[1]][[2]]
APIDataFrame[[1]][[3]]
APIDataFrame[[1]
]
APIDataFrame[[2]]
APIDataFrame[[3]]
APIDataFrame[[4]]
APIDataFrame[[5]]
APIDataFrame[[6]]
APIDataFrame[[100]]
source("R/JsontoCsvWriter.R")
APIDataFrame <- JsonToCsvWriter("Data/placesAPIrestaurantMonJan261407422015.json")
APIDataFrame
write.csv(APIDataFrame, "Data/APIDataFrame.csv")
testcsv= read.csv("Data/APIDataFrame.csv", header = TRUE)
testcsv
source("R/JsontoCsvWriter.R")
APIDataFrame <- JsonToCsvWriter("Data/placesAPIrestaurantMonJan261407422015.json")
source("R/JsontoCsvWriter.R")
APIDataFrame <- JsonToCsvWriter("Data/placesAPIrestaurantMonJan261407422015.json")
JsonToCsvWriter <- function(file) {
raw_data <- fromJSON(file)
latlist <- list()
lonlist <- list()
namelist <- list()
typelist <- list()
addresslist <- list()
for(i in 1:length(raw_data$results)) {
latlist[i] <- raw_data$results[[i]]$geometry$location[1]
lonlist[i] <- raw_data$results[[i]]$geometry$location[2]
namelist[i] <- raw_data$results[[i]]$name
addressAdjusted <- raw_data$results[[i]]$vicinity
addressAdjusted <- gsub(",", "", addressAdjusted, fixed = TRUE)
addresslist[i] <- addressAdjusted
typescript <- ""
for(j in 1:length(raw_data$results[[i]]$types)) {
typescript <- paste(typescript,raw_data$results[[i]]$types[j])
}
typelist[i] <- typescript
}
datalist <- list(lat = latlist, lon = lonlist, name = namelist, type = typelist, address = addresslist)
API_Dataframe <- do.call(rbind, datalist)
print(API_Dataframe)
filename <- strsplit(file,".json")
filename <- paste(filename,".csv")
write.csv(API_DataFrame, filename)
}
APIDataFrame <- JsonToCsvWriter("Data/placesAPIrestaurantMonJan261407422015.json")
source("R/JsontoCsvWriter.R")
JsonToCsvWriter("Data/placesAPIrestaurantMonJan261407422015.json")
source("R/JsontoCsvWriter.R")
JsonToCsvWriter("Data/placesAPIrestaurantMonJan261407422015.json")
testcsv = read.csv("Data/APIDataFrame.csv", header = TRUE)
testcsv = read.csv("Data/placesAPIrestaurantMonJan261407422015 .csv", header = TRUE)
testcsv
