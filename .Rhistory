a <- JsonToCsvWriter("Data/placesAPIWedJan", "restaurant", "Ede")
a
source("R/JsontoCsvWriter.R")
source("R/JsontoCsvWriter.R")
a <- JsonToCsvWriter("Data/placesAPIWedJan", "restaurant", "Ede")
a
names(a)
row.names(a)
source("R/JsontoCsvWriter.R")
JsonToCsvWriter("Data/placesAPIWedJan", "restaurant", "Ede")
source("R/JsontoCsvWriter.R")
JsonToCsvWriter("Data/placesAPIWedJan", "restaurant", "Ede")
source("R/JsontoCsvWriter.R")
JsonToCsvWriter("Data/placesAPIWedJan", "restaurant", "Ede")
APIcsv = (read.csv("Data/placesAPIWedJan/placesAPIWedJanrestaurantEde.csv", header = TRUE))
APIcsv
JsonToCsvWriter("Data/placesAPIWedJan", "restaurant", "Ede")
APIcsv = (read.csv("Data/placesAPIWedJan/placesAPIWedJanrestaurantEde.csv", header = TRUE))
APIcsv
source("R/JsontoCsvWriter.R")
source("R/JsontoCsvWriter.R")
JsonToCsvWriter("Data/placesAPIWedJan", "restaurant", "Ede")
APIcsv = (read.csv("Data/placesAPIWedJan/placesAPIWedJanrestaurantEde.csv", header = TRUE))
library(chron)
install.packages("chron")
library(chron)
JsonToCsvWriter("Data/placesAPIWedJan", "restaurant", "Ede")
library(chron)
source("R/JsontoCsvWriter.R")
JsonToCsvWriter("Data/placesAPIWedJan", "restaurant", "Ede")
source("R/JsontoCsvWriter.R")
JsonToCsvWriter("Data/placesAPIWedJan", "restaurant", "Ede")
source("R/JsontoCsvWriter.R")
JsonToCsvWriter("Data/placesAPIWedJan", "restaurant", "Ede")
APIcsv = (read.csv("Data/placesAPIWedJan/placesAPIWedJanrestaurantEde.csv", header = TRUE))
APIcsv
source("R/JsontoCsvWriter.R")
JsonToCsvWriter("Data/placesAPIWedJan", "restaurant", "Ede")
APIcsv = (read.csv("Data/placesAPIWedJan/placesAPIWedJanrestaurantEde.csv", header = TRUE))
APIcsv
source("R/JsontoCsvWriter.R")
JsonToCsvWriter("Data/placesAPIWedJan", "restaurant", "Ede")
APIcsv = t(read.csv(filename, header = TRUE))
write.csv(APIcsv, filename, row.names = FALSE)
APIcsv = read.csv(filename, header = TRUE)
columnnames <- row.names(API_DataFrame)
print(columnnames)
for (l in 1:length(columnnames)) {
names(APIcsv)[l] <- columnnames[l]
}
print(names(APIcsv))
write.csv(APIcsv, filename, row.names = FALSE)
for (m in 1:length(file.list)) {
fileremoval <- paste(filelocation,"/",file.list[m])
fileremoval <- gsub(" ", "", fileremoval, fixed = TRUE)
file.remove(fileremoval)
}
source("R/JsontoCsvWriter.R")
JsonToCsvWriter("Data/placesAPIWedJan", "restaurant", "Ede")
source("R/JsontoCsvWriter.R")
JsonToCsvWriter("Data/placesAPIWedJan", "restaurant", "Ede")
APIcsv = (read.csv("Data/placesAPIWedJan/placesAPIWedJanrestaurantEde.csv", header = TRUE))
APIcsv
source("R/JsontoCsvWriter.R")
JsonToCsvWriter("Data/placesAPIWedJan", "restaurant", "Ede")
?write.csv
source("R/JsontoCsvWriter.R")
JsonToCsvWriter("Data/placesAPIWedJan", "restaurant", "Ede")
source("R/JsontoCsvWriter.R")
JsonToCsvWriter("Data/placesAPIWedJan", "restaurant", "Ede")
source("R/JsontoCsvWriter.R")
get.places.API.Loop(lat = LatCity, lon = LonCity, radius = 5000, searchtypes = "grocery_or_supermarket",
filetype = "json", key = "AIzaSyAcdv2napQhKQoP8pY9nebMkFJTZyeddDs")
JsonToCsvWriter("Data/placesAPIWedJan", "supermarket", "Ede")
APIcsv = (read.csv("Data/placesAPIWedJan/placesAPIWedJansupermarketEde.csv", header = TRUE))
APIcsv
names(APIcsv)
library(RgoogleMaps)
APIcsv
names(APIcsv)
API= read.csv("Data/placesAPIWedJan//placesAPIWedJansupermarketWageningen.csv", header = TRUE)
print(names(API))
# convert to SpatialPointDataFrame
coordinates(API) <- c("lat", "lon")
proj4string(API) <- CRS("+proj=longlat +datum=WGS84")
gc <- geocode('wageningen, GL')
DB <- data.frame(name=API$name, address=API$address)
coordinates
coordinates(API)
API
DB <- cbind(DB, API@coords)
API@coords
DB <- data.frame(name=c(0,1), address=c("wageningen", "GL")
)
center <- as.numeric(gc)
G <- ggmap(get_googlemap(center = center, color = 'bw', scale = 4), extent = "device")
G1 <- G + geom_point(aes(x=lat, y=lon ),data= API, color="red", size=5)
plot(G1)
DB <- data.frame(name= 3), POINT_X=API$lat, POINT_Y= API$lon)
DB <- data.frame(name= 3), POINT_X=API$lat, POINT_Y= API$lon))
DB <- data.frame(name= 3), POINT_X=(API$lat), POINT_Y= (API$lon))
x <- geom_point(data=APIcsv, aes(x=lat,y=lon, group=NULL),
colour="red", alpha=0.2, size=1)
G1 <- G + x
plot(G1)
x <- geom_point(data=API, aes(x=lat,y=lon, group=NULL),
colour="red", alpha=0.2, size=1)
API= read.csv("Data/placesAPIWedJan//placesAPIWedJansupermarketWageningen.csv", header = TRUE)
x <- geom_point(data=API, aes(x=lat,y=lon, group=NULL),
colour="red", alpha=0.2, size=1)
G1 <- G + x
plot(G1)
G <- ggmap(get_googlemap(center = center, color = 'bw', scale = 7), extent = "device")
x <- geom_point(data=API, aes(x=lat,y=lon, group=NULL),
colour="red", alpha=0.2, size=1)
G1 <- G + x
plot(G1)
G <- ggmap(get_googlemap(center = center, color = 'bw', scale = 1), extent = "device")
x <- geom_point(data=API, aes(x=lat,y=lon, group=NULL),
colour="red", alpha=0.2, size=1)
G1 <- G + x
plot(G1)
G <- ggmap(get_googlemap(center = center, color = 'bw', scale = 50), extent = "device")
x <- geom_point(data=API, aes(x=lat,y=lon, group=NULL),
colour="red", alpha=0.2, size=1)
G1 <- G + x
plot(G1)
G <- ggmap(get_googlemap(center = center, color = 'bw', scale = 10), extent = "device")
x <- geom_point(data=API, aes(x=lat,y=lon, group=NULL),
colour="red", alpha=0.2, size=1)
G1 <- G + x
plot(G1)
G <- ggmap(get_googlemap(center = center, color = 'bw', scale = 5), extent = "device")
G <- ggmap(get_googlemap(center = center, color = 'bw', scale = 4), extent = "device")
x <- geom_point(data=API, aes(x=lat,y=lon, group=NULL),
colour="red", alpha=0.2, size=1)
G1 <- G + x
plot(G1)
library(mapproj)
pg <- get_map(location='Wageningen, GL',
zoom = 14,       # ranges from 0 (whole world) to 21 (building)
source='stamen', # try 'google' or 'osm'
maptype='toner',
color='color'
)
PG <- ggmap(pg, extent='panel',
base_layer=ggplot(hawkers, aes(x=longitude, y=latitude))
)
print(PG)
PG <- ggmap(pg, extent='panel',
base_layer=ggplot(API, aes(x=lon, y=lat))
)
print(PG)
PG <- ggmap(pg, extent='panel',
#base_layer=ggplot(API, aes(x=lon, y=lat))
)
print(PG)
PG <- ggmap(pg, extent='panel',
base_layer=ggplot(API, aes(x=lon, y=lat))
)
print(PG)
pg <- get_map(location='Wageningen, GL',
zoom = 14,       # ranges from 0 (whole world) to 21 (building)
source='stamen', # try 'google' or 'osm'
maptype='burningmap',
color='color'
)
# the ggmap() function will convert your map data into a ggplot object
# the agruments to include your data at this stage are not essential, but
# can make it easier to add layers (such as 'geoms') later on
PG <- ggmap(pg, extent='panel',
base_layer=ggplot(API, aes(x=lon, y=lat))
)
print(PG)
pg <- get_map(location='Wageningen, GL',
zoom = 14,       # ranges from 0 (whole world) to 21 (building)
source='stamen', # try 'google' or 'osm'
maptype='watercolour',
color='color'
)
# the ggmap() function will convert your map data into a ggplot object
# the agruments to include your data at this stage are not essential, but
# can make it easier to add layers (such as 'geoms') later on
PG <- ggmap(pg, extent='panel',
base_layer=ggplot(API, aes(x=lon, y=lat))
)
print(PG)
pg <- get_map(location='Wageningen, GL',
zoom = 14,       # ranges from 0 (whole world) to 21 (building)
source='stamen', # try 'google' or 'osm'
maptype='terrain',
color='color'
)
PG <- ggmap(pg, extent='panel',
base_layer=ggplot(API, aes(x=lon, y=lat))
)
print(PG)
pg <- get_map(location='Wageningen, GL',
zoom = 14,       # ranges from 0 (whole world) to 21 (building)
source='stamen', # try 'google' or 'osm'
maptype='toner',
color='color'
)
# the ggmap() function will convert your map data into a ggplot object
# the agruments to include your data at this stage are not essential, but
# can make it easier to add layers (such as 'geoms') later on
PG <- ggmap(pg, extent='panel',
base_layer=ggplot(API, aes(x=lon, y=lat))
)
print(PG)
PG <- ggmap(pg, extent='panel',
base_layer=ggplot(API, aes(x=lon, y=lat))
)
print(PG)
PG <- PG + geom_point(color = "red", size = 4)
print(PG)
pg <- get_map(location='Wageningen, GL',
zoom = 13,       # ranges from 0 (whole world) to 21 (building)
source='stamen', # try 'google' or 'osm'
maptype='toner',
color='color'
)
PG <- ggmap(pg, extent='panel',
base_layer=ggplot(API, aes(x=lon, y=lat))
)
print(PG)
PG <- PG + geom_point(color = "red", size = 4)
print(PG)
PG <- PG + geom_point(color = "green", size = 4)
print(PG)
pg <- get_map(location='Wageningen, GL',
zoom = 12,       # ranges from 0 (whole world) to 21 (building)
source='stamen', # try 'google' or 'osm'
maptype='toner',
color='color'
)
# the ggmap() function will convert your map data into a ggplot object
# the agruments to include your data at this stage are not essential, but
# can make it easier to add layers (such as 'geoms') later on
PG <- ggmap(pg, extent='panel',
)
print(PG)
base_layer=ggplot(API, aes(x=lon, y=lat))
PG <- PG + geom_point(color = "green", size = 4)
print(PG)
print(PG)
PG <- PG + geom_point(color = "green", size = 4)
print(PG)
API= read.csv("Data/placesAPIWedJan//placesAPIWedJansupermarketWageningen.csv", header = TRUE)
print(names(API))
pg <- get_map(location='Wageningen, GL',
zoom = 12,       # ranges from 0 (whole world) to 21 (building)
source='stamen', # try 'google' or 'osm'
maptype='toner',
color='color'
)
# the ggmap() function will convert your map data into a ggplot object
# the agruments to include your data at this stage are not essential, but
# can make it easier to add layers (such as 'geoms') later on
PG <- ggmap(pg, extent='panel',
base_layer=ggplot(API, aes(x=lon, y=lat))
)
print(PG)
PG <- PG + geom_point(color = "green", size = 4)
print(PG)
API= read.csv("Data/placesAPIWedJan//placesAPIWedJanrestaurantWageningen.csv", header = TRUE)
print(names(API))
zoom = 12,       # ranges from 0 (whole world) to 21 (building)
source='stamen', # try 'google' or 'osm'
color='color'
)
# the agruments to include your data at this stage are not essential, but
# can make it easier to add layers (such as 'geoms') later on
base_layer=ggplot(API, aes(x=lon, y=lat))
print(PG)
PG <- PG + geom_point(color = "green", size = 4)
print(PG)
maptype='toner',
pg <- get_map(location='Wageningen, GL',
)
PG <- ggmap(pg, extent='panel',
# the ggmap() function will convert your map data into a ggplot object
pg <- get_map(location='Wageningen, GL',
zoom = 14,       # ranges from 0 (whole world) to 21 (building)
source='stamen', # try 'google' or 'osm'
maptype='toner',
color='color'
)
# the ggmap() function will convert your map data into a ggplot object
# the agruments to include your data at this stage are not essential, but
# can make it easier to add layers (such as 'geoms') later on
PG <- ggmap(pg, extent='panel',
base_layer=ggplot(API, aes(x=lon, y=lat))
)
print(PG)
PG <- PG + geom_point(color = "green", size = 4)
print(PG)
pg <- get_map(location='Wageningen, GL',
zoom = 15,       # ranges from 0 (whole world) to 21 (building)
source='stamen', # try 'google' or 'osm'
maptype='toner',
color='color'
)
PG <- ggmap(pg, extent='panel',
base_layer=ggplot(API, aes(x=lon, y=lat))
)
print(PG)
print(PG)
PG <- PG + geom_point(color = "green", size = 4)
pg <- get_map(location='Wageningen, GL',
zoom = 15,       # ranges from 0 (whole world) to 21 (building)
source='stamen', # try 'google' or 'osm'
maptype='toner',
color='color'
)
PG <- ggmap(pg, extent='panel',
base_layer=ggplot(API, aes(x=lon, y=lat))
)
print(PG)
PG <- PG + geom_point(color = "green", size = 4)
print(PG)
source("R/BasicMapMaker.R")
source("R/BasicMapMaker.R")
basicmapmaker(location = 'Ede , GL',csvfile = "Data/placesAPIWedJan//placesAPIWedJansupermarketEde.csv",zoom = 13,maptype = 'toner')
basicmapmaker(location = 'Ede , GL',csvfile = "Data/placesAPIWedJan//placesAPIWedJansupermarketEde.csv",zoom = 10,maptype = 'toner')
basicmapmaker(location = 'Wageningen , GL',csvfile = "Data/placesAPIWedJan//placesAPIWedJanrestaurantWageningen.csv.csv",zoom = 10,maptype = 'toner')
basicmapmaker(location = 'Wageningen , GL',csvfile = "Data/placesAPIWedJan//placesAPIWedJanrestaurantWageningen.csv",zoom = 10,maptype = 'toner')
basicmapmaker(location = 'Ede , GL',csvfile = "Data/placesAPIWedJan//placesAPIWedJanrestaurantWageningen.csv",zoom = 10,maptype = 'toner')
basicmapmaker(location = 'Ede , GL',csvfile = "Data/placesAPIWedJan//placesAPIWedJansupermarketEde.csv",zoom = 10,maptype = 'toner')
basicmapmaker(location = 'Ede , GL',csvfile = "Data/placesAPIWedJan//placesAPIWedJansupermarketEde.csv",zoom = 7,maptype = 'toner')
basicmapmaker(location = 'Ede , GL',csvfile = "Data/placesAPIWedJan//placesAPIWedJansupermarketEde.csv",zoom = 7,maptype = 'toner')
source("R/BasicMapMaker.R")
basicmapmaker(location = 'Ede , GL',csvfile = "Data/placesAPIWedJan//placesAPIWedJansupermarketEde.csv",zoom = 10,maptype = 'toner')
basicmapmaker(location = 'Ede , GL',csvfile = "Data/placesAPIWedJan//placesAPIWedJansupermarketEde.csv",zoom = 2,maptype = 'toner')
basicmapmaker(location = 'Ede , GL',csvfile = "Data/placesAPIWedJan//placesAPIWedJansupermarketEde.csv",zoom = 2,maptype = 'toner')
source("R/BasicMapMaker.R")
basicmapmaker(location = 'Ede , GL',csvfile = "Data/placesAPIWedJan//placesAPIWedJansupermarketEde.csv",zoom = 2,maptype = 'toner')
basicmapmaker(location = 'Ede , GL',csvfile = "Data/placesAPIWedJan//placesAPIWedJansupermarketEde.csv",zoom = 12,maptype = 'toner')
basicmapmaker(location = 'Ede , GL',csvfile = "Data/placesAPIWedJan//placesAPIWedJansupermarketEde.csv",zoom = 14,maptype = 'toner')
basicmapmaker(location = 'Ede , GL',csvfile = "Data/placesAPIWedJan//placesAPIWedJansupermarketEde.csv",zoom = 10,maptype = 'toner')
basicmapmaker(location = 'Ede , GL',csvfile = "Data/placesAPIWedJan//placesAPIWedJansupermarketEde.csv",zoom = 11,maptype = 'toner')
basicmapmaker(location = 'Ede , GL',csvfile = "Data/placesAPIWedJan//placesAPIWedJansupermarketEde.csv",zoom = 12,maptype = 'toner')
get.places.API.Loop(lat = LatCity, lon = LonCity, radius = 1000, searchtypes = "grocery_or_supermarket",
filetype = "json", key = "AIzaSyAcdv2napQhKQoP8pY9nebMkFJTZyeddDs")
JsonToCsvWriter("Data/placesAPIWedJan", "supermarket", "Ede")
API = (read.csv("Data/placesAPIWedJan/placesAPIWedJansupermarketEde.csv", header = TRUE))
names(API)
names(API)
basicmapmaker(location = 'Ede , GL',csvfile = "Data/placesAPIWedJan//placesAPIWedJansupermarketEde.csv",zoom = 12,maptype = 'toner')
API
source("R/BasicMapMaker.R")
basicmapmaker(location = 'Ede , GL',csvfile = "Data/placesAPIWedJan//placesAPIWedJansupermarketEde.csv",zoom = 12,maptype = 'toner',title = "Ede Supermarkets 1km from Centre")
basicmapmaker(location = 'Ede , GL',csvfile = "Data/placesAPIWedJan//placesAPIWedJansupermarketEde.csv",zoom = 14,maptype = 'toner',title = "Ede Supermarkets 1km from Centre")
basicmapmaker(location = 'Ede , GL',csvfile = "Data/placesAPIWedJan//placesAPIWedJansupermarketEde.csv",zoom = 15,maptype = 'toner',title = "Ede Supermarkets 1km from Centre")
basicmapmaker(location = 'Ede , GL',csvfile = "Data/placesAPIWedJan//placesAPIWedJansupermarketEde.csv",zoom = 16,maptype = 'toner',title = "Ede Supermarkets 1km from Centre")
basicmapmaker(location = 'Ede , GL',csvfile = "Data/placesAPIWedJan//placesAPIWedJansupermarketEde.csv",zoom = 13,maptype = 'toner',title = "Ede Supermarkets 1km from Centre")
basicmapmaker(location = 'Ede , GL',csvfile = "Data/placesAPIWedJan//placesAPIWedJansupermarketEde.csv",zoom = 14,maptype = 'toner',title = "Ede Supermarkets 1km from Centre")
basicmapmaker(location = 'Ede , GL',csvfile = "Data/placesAPIWedJan//placesAPIWedJansupermarketEde.csv",zoom = 14,maptype = 'toner',title = "Ede Supermarkets 1km from Centre")
basicmapmaker(location = 'Wageningen , GL',csvfile = "Data/placesAPIWedJan//placesAPIWedJansupermarketWageningen.csv",zoom = 14,maptype = 'toner',title = "Ede Supermarkets 1km from Centre")
basicmapmaker(location = 'Wageningen , GL',csvfile = "Data/placesAPIWedJan//placesAPIWedJansupermarketWageningen.csv",zoom = 14,maptype = 'toner',title = "Ede Supermarkets 1km from Centre")
basicmapmaker(location = 'Wageningen , GL',csvfile = "Data/placesAPIWedJan//placesAPIWedJansupermarketWageningen.csv",zoom = 14,maptype = 'toner',title = "Ede Supermarkets 1km from Centre")
basicmapmaker(location = 'Wageningen , GL',csvfile = "Data/placesAPIWedJan//placesAPIWedJansupermarketWageningen.csv",zoom = 14,maptype = 'toner',title = "Ede Supermarkets 1km from Centre")
# Team: ZeaPol
# Team Members: Roeland de Koning / Barbara Sienkiewicz
# Date: 29/01/2015
# Final_Project
##########################################################
# Check working directory
getwd()
# If necessary, change directory by:
#setwd()
# Load libraries
library(RCurl)
library(RJSONIO)
library(plyr)
library(ggplot2)
library(ggmap)
library(maps)
library(sp)
library(rgdal)
library(RgoogleMaps)
library(mapproj)
# Functions used
source("R/GeocodeLocater.R")
source("R/APIget.R")
source("R/APIgetLoop.R")
source("R/Sleep.R")
source("R/JsontoCsvWriter.R")
source("R/BasicMapMaker.R")
##########################################################
# BELOW YOU CAN CHANGE YOUR SEARCH SETTINGS
##########################################################
# Specify the city in folowing format: city, municipatily abreviation (e.g. "Ede, GL")
city <- "Ede, GL"
# Specify searctype (choose one from: cafe, conviniece_store, food, grocery_or_supermarket,
# liquor_store, meal_delivery, meal_takeaway, restaurant, store )
searchtype <- "grocery_or_supermarket"
# Specify the radius (in meters)
rad <- 1000
# Add your API key
KEY <- "AIzaSyAcdv2napQhKQoP8pY9nebMkFJTZyeddDs"
##########################################################
# Get longitude and latitute of the centre of the city
CityGeocode <- gGeoCode(city)
LatCity <- CityGeocode[1]
LonCity <- CityGeocode[2]
# Get JSON files with results of the search and save them in the created folder
get.places.API.Loop(lat = LatCity, lon = LonCity, radius = rad, searchtypes = searchtype,
filetype = "json", key = KEY)
# Write results into .csv in folder specified as argument
JsonToCsvWriter("Data/placesAPIWedJan", searchtype, city)
API = (read.csv("Data/placesAPIWedJan/placesAPIWedJansupermarketEde.csv", header = TRUE))
API
# Check column names
names(API)
basicmapmaker(location = 'Wageningen , GL',csvfile = "Data/placesAPIWedJan//placesAPIWedJansupermarketWageningen.csv",zoom = 14,maptype = 'toner',title = "Ede Supermarkets 1km from Centre")
# Specify the city in folowing format: city, municipatily abreviation (e.g. "Ede, GL")
city <- "Ede, GL"
# Specify searctype (choose one from: cafe, conviniece_store, food, grocery_or_supermarket,
# liquor_store, meal_delivery, meal_takeaway, restaurant, store )
searchtype <- "food"
# Specify the radius (in meters)
rad <- 1000
# Add your API key
KEY <- "AIzaSyAcdv2napQhKQoP8pY9nebMkFJTZyeddDs"
##########################################################
# Get longitude and latitute of the centre of the city
CityGeocode <- gGeoCode(city)
LatCity <- CityGeocode[1]
LonCity <- CityGeocode[2]
# Get JSON files with results of the search and save them in the created folder
get.places.API.Loop(lat = LatCity, lon = LonCity, radius = rad, searchtypes = searchtype,
filetype = "json", key = KEY)
# Write results into .csv in folder specified as argument
JsonToCsvWriter("Data/placesAPIWedJan", searchtype, city)
# Read created .csv
API = (read.csv("Data/placesAPIWedJan/placesAPIWedJansupermarketEde.csv", header = TRUE))
API
# Check column names
names(API)
basicmapmaker(location = 'Wageningen , GL',csvfile = "Data/placesAPIWedJan//placesAPIWedJansupermarketWageningen.csv",zoom = 14,maptype = 'toner',title = "Ede Supermarkets 1km from Centre")
# Specify the city in folowing format: city, municipatily abreviation (e.g. "Ede, GL")
city <- "Ede, GL"
# Specify searctype (choose one from: cafe, conviniece_store, food, grocery_or_supermarket,
# liquor_store, meal_delivery, meal_takeaway, restaurant, store )
searchtype <- "food"
# Specify the radius (in meters)
rad <- 1000
# Add your API key
KEY <- "AIzaSyAcdv2napQhKQoP8pY9nebMkFJTZyeddDs"
##########################################################
# Get longitude and latitute of the centre of the city
CityGeocode <- gGeoCode(city)
LatCity <- CityGeocode[1]
LonCity <- CityGeocode[2]
# Get JSON files with results of the search and save them in the created folder
get.places.API.Loop(lat = LatCity, lon = LonCity, radius = rad, searchtypes = searchtype,
filetype = "json", key = KEY)
# Write results into .csv in folder specified as argument
JsonToCsvWriter("Data/placesAPIWedJan", searchtype, city)
# Read created .csv
API = (read.csv("Data/placesAPIWedJan/placesAPIWedJanfoodEde.csv", header = TRUE))
API
# Check column names
names(API)
basicmapmaker(location = city,csvfile = "Data/placesAPIWedJan//placesAPIWedJanfoodEde.csv",
zoom = 14,maptype = 'toner',title = "Ede Supermarkets 1km from Centre") # automate naming!
city <- "Ede, GL"
# Specify searctype (choose one from: cafe, conviniece_store, food, grocery_or_supermarket,
# liquor_store, meal_delivery, meal_takeaway, restaurant, store )
searchtype <- "food"
# Specify the radius (in meters)
rad <- 1000
# Add your API key
KEY <- "AIzaSyAcdv2napQhKQoP8pY9nebMkFJTZyeddDs"
##########################################################
# Get longitude and latitute of the centre of the city
CityGeocode <- gGeoCode(city)
LatCity <- CityGeocode[1]
LonCity <- CityGeocode[2]
# Get JSON files with results of the search and save them in the created folder
get.places.API.Loop(lat = LatCity, lon = LonCity, radius = rad, searchtypes = searchtype,
filetype = "json", key = KEY)
# Write results into .csv in folder specified as argument
JsonToCsvWriter("Data/placesAPIWedJan", searchtype, "Ede")
# Read created .csv
API = (read.csv("Data/placesAPIWedJan/placesAPIWedJanfoodEde.csv", header = TRUE))
API
# Check column names
names(API)
basicmapmaker(location = city,csvfile = "Data/placesAPIWedJan//placesAPIWedJanfoodEde.csv",
zoom = 14,maptype = 'toner',title = "Ede Supermarkets 1km from Centre") # automate naming!
CityGeocode <- gGeoCode(city)
LatCity <- CityGeocode[1]
get.places.API.Loop(lat = LatCity, lon = LonCity, radius = rad, searchtypes = searchtype,
filetype = "json", key = KEY)
JsonToCsvWriter("Data/placesAPIWedJan", searchtype, "Ede")
API = (read.csv("Data/placesAPIWedJan/placesAPIWedJanfoodEde.csv", header = TRUE))
API
names(API)
basicmapmaker(location = city,csvfile = "Data/placesAPIWedJan//placesAPIWedJanfoodEde.csv",
zoom = 14,maptype = 'toner',title = "Ede Supermarkets 1km from Centre") # automate naming!
basicmapmaker(location = city,csvfile = "Data/placesAPIWedJan//placesAPIWedJanfoodEde.csv",
zoom = 14,maptype = 'toner',title = "Ede Supermarkets 1km from Centre") # automate naming!
basicmapmaker(location = city,csvfile = "Data/placesAPIWedJan//placesAPIWedJanfoodEde.csv",
zoom = 14,maptype = 'toner',title = "Ede Supermarkets 1km from Centre") # automate naming!
basicmapmaker(location = city,csvfile = "Data/placesAPIWedJan//placesAPIWedJanfoodEde.csv",
zoom = 14,maptype = 'toner',title = "Ede Supermarkets 1km from Centre") # automate naming!
basicmapmaker(location = city,csvfile = "Data/placesAPIWedJan//placesAPIWedJanfoodEde.csv",
zoom = 14,maptype = 'toner',title = "Ede Supermarkets 1km from Centre") # automate naming!
basicmapmaker(location = city,csvfile = "Data/placesAPIWedJan//placesAPIWedJanfoodEde.csv",
zoom = 14,maptype = 'toner',title = "Ede Food 1km from Centre") # automate naming!
